;; default
(setq user-full-name "Martin Klimeš"
      user-mail-address "{{ .email }}"
      user-login-name "{{ .chezmoi.username }}")

(setq org-directory "~/org/")
(setq org-deadline-warning-days 7)


(setq auto-save-interval 200) ; default is 300

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(setq scroll-margin 0) ; 0 everywhere but 5 in mu4e:headers


;; fonts
(after! unicode-fonts
  (push "IBM Plex Sans KR" (cadr (assoc "Enclosed Alphanumerics" unicode-fonts-block-font-mapping)))
  (delete "Noto Color Emoji" doom-emoji-fallback-font-families))

;(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'semi-light))
(setq doom-font (font-spec :family "JetBrains Mono" :size 16))
(setq doom-unicode-font doom-font)

(setq all-the-icons-scale-factor 1.0) ;; fixes the issue of rightmost characters not fitting.


;; wakatime
(global-wakatime-mode)

;; org
;; org agenda
;(setq org-columns-default-format "%60ITEM(Task) %6Effort(Estim){:}")
(setq org-columns-default-format "%TODO %PRIORITY %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM %TAGS")
;; (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
;;                                 (todo . " %i %-12:c %-6e")
;;                                 (tags . " %i %-12:c")
;;                                 (search . " %i %-12:c")))
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

(setq
 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000 2200)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")

;; mu4e

(after! mu4e
  ;; mu4e - accounts
(load "~/.doom.d/mu4eaccounts.el")

  ;; mu4e - sendmail
 (setq sendmail-program "/usr/bin/msmtp"
       send-mail-function 'smtpmail-send-it
       message-sendmail-f-is-evil t
       message-sendmail-extra-arguments '("--read-envelope-from")
       message-send-mail-function 'message-send-mail-with-sendmail)

  ;;  mu4e - contacts
;  (setq mu4e-compose-complete-only-personal 't)
;  (setq mu4e-org-contacts-file  "~/org/contacts.org")
;  (add-to-list 'mu4e-headers-actions
;               '("org-contact-add" . mu4e-action-add-org-contact) t)
;  (add-to-list 'mu4e-view-actions
;               '("org-contact-add" . mu4e-action-add-org-contact) t)

  (setq gnus-icalendar-org-capture-file "~/org/notes.org")
  (setq gnus-icalendar-org-capture-headline '("Calendar"))
  (gnus-icalendar-org-setup)

;; mu4e - main

  (setq mu4e-compose-in-new-frame t)
 (setq mu4e-update-interval 300)             ;; update every 5 minutes
 (setq mu4e-view-auto-mark-as-read nil)

 ;;(setq mu4e-headers-thread-first-child-prefix '("o " . "o ")) ; zmena!


 (setq mu4e-headers-fields
       '(
         (:account-stripe . 1)
         (:human-date . 8)
         (:flags . 6)
         (:to . 15)
         (:from-or-to . 20)
         (:recipnum . 2)
         ;(:subject . 94))
         (:subject . 104))

       +mu4e-min-header-frame-width 143
       mu4e-headers-date-format "%d/%m/%y"
       mu4e-headers-time-format "⧖ %H:%M"
       ;mu4e-headers-time-format "  %H:%M"
       mu4e-search-results-limit 1000
       mu4e-index-cleanup t)
(setq mu4e-headers-unread-mark    '("u" . "▰"))


;; mu4e - bookmarks

 (setq mu4e-bookmarks
 '(( :name  "Unread messages"
     :query "flag:unread AND NOT (flag:trashed OR maildir:/{{ .fiemail }}/mailbox.spam)"
     :key ?u)
   ( :name "Today's messages"
     :query "date:today..now"
     :key ?t)
   ( :name "Last 7 days"
     :query "date:7d..now"
     :hide-unread t
     :key ?w)
   ( :name "Messages with images"
     :query "mime:image/*"
     :key ?p)

  ;(:name "Unread messages" :query "flag:unread AND NOT flag:trashed AND NOT /{{ .fiemail }}/mailbox.spam" :key ?u)
  (:name "Yesterday's messages" :query "date:2d..1d" :key ?y)
  (:name "Inbox fi" :query "maildir:/{{ .fiemail }}/INBOX" :key ?i)
  (:name "CVT important" :query "(maildir:/{{ .fiemail }}/CVT/Unix OR maildir:/{{ .fiemail }}/CVT/cvt) and flag:unread" :key ?c)
  (:name "Unread Monitoring" :query "maildir:/{{ .fiemail }}/Monitoring/ and flag:unread" :key ?m)

                ))

 ;; mu4e - colors


 (setq +mu4e-compose-org-msg-toggle-next nil)
;(setq mu4e-alert-icon "/usr/share/icons/Papirus/64x64/apps/evolution.svg")
 (setq message-cite-prefix-regexp "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[>:|]\\)+")

;; mu4e - diary - icalendar test
 (require 'mu4e-icalendar)
 (setq mu4e-icalendar-diary-file "~/org/diary")
 (mu4e-icalendar-setup)

(setq mu4e-alert-interesting-mail-query "flag:unread AND NOT (flag:trashed OR maildir:/xklimes5@fi.muni.cz/mailbox.spam)")

 ;; HACK: mu4e - mu4e-alert FIX

(defun mu4e-alert-klimi-grouped-mail-notification-formatter (mail-group all-mails)
;       (when +mu4e-alert-bell-cmd
;         (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd)))
  (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd))
  (let* ((mail-count (length mail-group))
         (total-mails (length all-mails))
         (first-mail (car mail-group))
         (title-prefix (format "You have [%d/%d] unread email%s"
                               mail-count
                               total-mails
                               (if (> mail-count 1) "s" "")))
         (field-value (mu4e-alert--get-group first-mail))
         (title-suffix (format (pcase mu4e-alert-group-by
                                 (`:from "from %s:")
                                 (`:to "to %s:")
                                 (`:maildir "in %s:")
                                 (`:priority "with %s priority:")
                                 (`:flags "with %s flags:"))
                               field-value))
         (title (format "%s %s\n" title-prefix title-suffix)))
    (list :title title
          :body (concat "• "
                        (s-join "\n• "
                                (mapcar (lambda (mail)
                                          (plist-get mail :subject))
                                        mail-group))))))
  (setq mu4e-alert-grouped-mail-notification-formatter #'mu4e-alert-klimi-grouped-mail-notification-formatter)


;     (defun +mu4e-alert-test-grouped-mail-notification-formatter-with-bell (mail-group _all-mails)
;       "Default function to format MAIL-GROUP for notification.
; ALL-MAILS are the all the unread emails"
;       (when +mu4e-alert-bell-cmd
;         (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd)))
;       ;(if (> (length mail-group) 1)
;           (let* ((mail-count (length mail-group))
;                  (first-mail (car mail-group))
;                  (title-prefix (format "You have %d unread emails"
;                                        mail-count))
;                  (field-value (mu4e-alert--get-group first-mail))
;                  (title-suffix (format (pcase mu4e-alert-group-by
;                                          (`:from "from %s:")
;                                          (`:to "to %s:")
;                                          (`:maildir "in %s:")
;                                          (`:priority "with %s priority:")
;                                          (`:flags "with %s flags:"))
;                                        field-value))
;                  (title (format "%s %s" title-prefix title-suffix)))
;     (list :title title
;           :body (concat "• "
;                         (s-join "\n• "
;                                 (mapcar (lambda (mail)
;                                           (plist-get mail :subject))
;          ;                               mail-group))))
;          ;   (list :title title
;          ;         :body (s-join "\n"
;          ;                       (mapcar (lambda (mail)
;          ;                                 (format "%s<b>%s</b> • %s"
;          ;                                         ;(cond
;          ;                                         ; ((plist-get mail :in-reply-to) "⮩ ")
;          ;                                         ; ((string-match-p "\\`Fwd:"
;          ;                                         ;                  (plist-get mail :subject)) " ⮯ ")
;          ;                                         ; (t "  "))
;          ;                                         (truncate-string-to-width (plist-get mail :from)
;
;          ;                                                                   20 nil nil t)
;          ;                                         (truncate-string-to-width
;          ;                                          (replace-regexp-in-string "\\`Re: \\|\\`Fwd: " ""
;          ;                                                                    (plist-get mail :subject))
;          ;                                          40 nil nil t)))
;                                         mail-group))))
; ;        (let* ((new-mail (car mail-group))
; ;               (subject (plist-get new-mail :subject))
; ;               (sender (caar (plist-get new-mail :from))))
; ;          (list :title sender :body subject)
; ;          )
;         )
;

;(setq mu4e-alert-grouped-mail-notification-formatter #'+mu4e-alert-test-grouped-mail-notification-formatter-with-bell)







 ;; mu4e - after end
  )
;;; TEST TODO odstranit
;;;
;;;b34d

;; mu4e - scroll margin
;;

(add-hook 'mu4e-headers-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 15)))
(add-hook 'mu4e-view-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 10)))
(add-hook 'mu4e-main-mode-mode
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 3)))

;; org publish

(setq org-export-with-sub-superscripts nil)
(setq org-pandoc-options-for-html5 '((standalone . t) (self-contained . t)))


;; Load the publishing system
(require 'ox-publish)

;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

;; Define the publishing project
(setq org-publish-project-alist
      '(
        ("blog-img"
         :base-directory "~/org/web/img"
         :base-extension "png\\|jpg"
         :publishing-directory "~/public_html/img"
;     :publishing-directory "/ssh:merlin:/var/www/blog/img"
         :publishing-function org-publish-attachment)

        ("blog-org"
         :base-directory "~/org/web"
         :publishing-directory "~/public_html"
;     :publishing-directory "/ssh:merlin:/var/www/blog"
         :publishing-function org-html-publish-to-html
         :auto-preamble t
         :recursive t
         :sitemap-title "K11m1's blog"
         :sitemap-filename "index.org"
         :sitemap-sort-files anti-chronologically
         :auto-sitemap t
         :with-author nil           ;; Don't include author name
         :with-creator nil          ;; Include Emacs and Org versions in footer
         :with-toc nil              ;; Don't include a table of contents
         :section-numbers nil       ;; Don't include section numbers
         :time-stamp-file nil)

        ("myprojectweb" :components("blog-org" "blog-img"))))

;; rsync -ravz ~/public_html/ merlin:/var/www/blog/

;; org configuration
;;
(after! org

;; org - agenda
(setq org-log-done 'time)
(setq org-log-into-drawer t)

(setq diary-file "~/org/diary")
(setq org-agenda-include-diary t)

; Show today
(setq org-agenda-start-day "+0d")
(setq org-agenda-span 1)

(setq org-agenda-custom-commands
      '(("h" "Agenda and "
         ((tags-todo "phone")(agenda "")

          ))
        ("o" "Agenda and Office-related tasks"
         ((agenda "")
          (tags-todo "unix"))

         ((org-agenda-tag-filter '("+unix"))))))

;; org - source block templates

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

;; ;; org - wild notification
;(after! org
;
;(org-wild-notifier-mode)
;)
;(setq org-wild-notifier-alert-time '(30 10))


;; org - org-alert
(setq alert-default-style 'libnotify)
(setq org-alert-interval 300
      org-alert-notify-cutoff 10
      org-alert-notify-after-event-cutoff 10)

;; org - capture templates
(setq org-capture-templates
      '(
        ("t" "Todo" entry (file+headline "~/org/index.org" "Tasks")
         "* TODO %?\n:CREATED: %U\n  %i\n  %a")
        ("i" "Idea" entry (file+headline "~/org/index.org" "Ideas")
         "* TODO %?\n:CREATED: %U\n  %i\n  %a")
        ("e" "email" entry (file+headline "~/org/index.org" "Emails")
         "* TODO EMAIL: %? %a %^g:email:\n:CREATED: %U\n  %i")
        ("u" "Unix Todo" entry (file+headline "~/org/unix.org" "Tasks")
         "* TODO %?\n:CREATED: %U\n  %i\n  %a"))
      )

;; INFO: Org - habit
;; (setq org-modules '(org-habit))

;; org - auto save advices
;;

(defmacro η (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

(advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
(advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
(advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
(advice-add 'org-todo           :after (η #'org-save-all-org-buffers))

(setq org-clock-persist t)

;; Org - journal

(setq org-journal-date-format "%a, %Y-%m-%d"
      org-journal-file-format "%Y-%m-%d.org")

;; org end
  )

;;; Calendar

(defun calendar-helper () ;; doesn't have to be interactive
  (cfw:open-calendar-buffer
   :contents-sources
   (list
        (cfw:org-create-source "Purple")
        (cfw:ical-create-source "unix@fi" "{{ keyring "cfw" "unixfi" }}" "SpringGreen4")
        (cfw:ical-create-source "Google:priv" "{{ keyring "cfw" "google" }}" "DodgerBlue"))))
(defun calendar-init ()
  ;; switch to existing calendar buffer if applicable
  (if-let (win (cl-find-if (lambda (b) (string-match-p "^\\*cfw:" (buffer-name b)))
                           (doom-visible-windows)
                           :key #'window-buffer))
      (select-window win)
    (calendar-helper)))
(defun =my-calendar ()
  "Activate (or switch to) *my* `calendar' in its workspace."
  (interactive)
  (if (modulep! :ui workspaces) ;; create workspace (if enabled)
      (progn
        (+workspace-switch "Calendar" t)
        (doom/switch-to-scratch-buffer)
       (calendar-init)

       (+workspace/display))
    (setq +calendar--wconf (current-window-configuration))

    (delete-other-windows)
    (switch-to-buffer (doom-fallback-buffer))
    (calendar-init)))
(after! calfw

 (setq cfw:render-line-breaker 'cfw:render-line-breaker-simple))

;; Languages - C/C++

(setq c-default-style "k&r"
      c-basic-offset 4
      indent-tabs-mode nil)


; TODO: Opravdu tohle chci?
(setq font-lock-comment-face  '(:foreground "#b4f7a5"))

;; Langes - C/C++ - oprava enteru na autocomplete
(after! cc
  (dolist (key '("<return>" "RET"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                               cmd)))))
 (setq company-auto-complete-chars nil))

(after! web-mode
  (dolist (key '("<tab>" "TAB"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                               cmd)))))
 (setq company-auto-complete-chars nil)
  )

;; TODO: MAGIT
;;
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))

;;; TODO: diary settings
(add-hook 'calendar-load-hook
          (lambda ()
            (calendar-set-date-style 'european)))

(setq calendar-date-style 'european)
(calendar-set-date-style 'european)

;; ;;; TODO: chezmoi [it doesn't really work atm]


;; (require 'chezmoi)
;; (defun chezmoi--evil-insert-state-enter ()
;;   "Run after evil-insert-state-entry."
;;   (chezmoi-template-buffer-display nil (point))
;;   (remove-hook 'after-change-functions #'chezmoi-template--after-change 1))

;; (defun chezmoi--evil-insert-state-exit ()
;;   "Run after evil-insert-state-exit."
;;   (chezmoi-template-buffer-display nil)
;;   (chezmoi-template-buffer-display t)
;;   (add-hook 'after-change-functions #'chezmoi-template--after-change nil 1))

;; (defun chezmoi-evil ()
;;   (if chezmoi-mode
;;       (progn
;;         (add-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter nil 1)
;;         (add-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit nil 1))
;;     (progn
;;       (remove-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter 1)
;;       (remove-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit 1))))
;; (add-hook 'chezmoi-mode-hook #'chezmoi-evil)

;;; vterm shell
(setq vterm-shell "/bin/zsh")
(setq vterm-tramp-shells '(("docker" "/bin/sh")("sshx" "/bin/bash")))
;(setq vterm-shell (if (file-readable-p "/usr/bin/zsh") "/usr/bin/zsh" "/bin/bash"))

;;; native compilation
(setq native-comp-async-jobs-number 5) ; use 5 cores when native compiling

;;; compilation - hide compilation if successful

 (add-hook 'compilation-start-hook 'compilation-started)
  (add-hook 'compilation-finish-functions 'hide-compile-buffer-if-successful)

  (defcustom auto-hide-compile-buffer-delay 1
    "Time in seconds before auto hiding compile buffer."
    :group 'compilation
    :type 'number
  )

  (defun hide-compile-buffer-if-successful (buffer string)
    (setq compilation-total-time (time-subtract nil compilation-start-time))
    (setq time-str (concat " (Time: " (format-time-string "%s.%3N" compilation-total-time) "s)"))

    (if
      (or
        (string-match ".*exited abnormally.*" string)

        ;; Delete it, if Hide Warnings too.
        (with-current-buffer buffer
          (goto-char (point-min))
          (search-forward "warning" nil t)
        )
      )

      ;;If Warnings/Errors then
      (message (concat "Compiled with Warnings/Errors" time-str))

      ;;If Compiled Successfully then
      (progn
        (bury-buffer buffer)
        (run-with-timer auto-hide-compile-buffer-delay nil 'delete-window (get-buffer-window buffer 'visible))
        (message (concat "Compiled Successfully" time-str))
        (shell-command "notify-send emacs-compilation 'Compilation completed'")
      )
    )
  )

  (make-variable-buffer-local 'compilation-start-time)

  (defun compilation-started (proc)
    (setq compilation-start-time (current-time))
  )

;;; cdlatex (yasnisppet overrides cdlatex in latex mode)
;; (map! :map cdlatex-mode-map
;;       :i "TAB" #'cdlatex-tab)

;;; fix org capture
;;;
(after! org
  (defadvice! dan/+org--restart-mode-h-careful-restart (fn &rest args)
    :around #'+org--restart-mode-h
    (let ((old-org-capture-current-plist (and (bound-and-true-p org-capture-mode)
                                              (bound-and-true-p org-capture-current-plist))))
      (apply fn args)
      (when old-org-capture-current-plist
        (setq-local org-capture-current-plist old-org-capture-current-plist)
        (org-capture-mode +1)))))

(after! ispell
  (setq ispell-dictionary "cs_CZ,en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "cs_CZ,en_US")


  )

;;; testing


(add-hook! 'LaTeX-mode-hook
          (defun preview-larger-previews ()
            (setq preview-scale-function
                  (lambda () (* 1.25
                           (funcall (preview-scale-from-face)))))))

;; CDLatex settings
(use-package cdlatex
;  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package! yasnippet
;  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets)
         )
  :config
  (use-package! warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package! cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field)
         )
  :config
  (use-package! yasnippet
    :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
    :bind (:map yas-keymap
           ("<tab>" . yas-next-field-or-cdlatex)
           ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))


;; (add-hook 'post-self-insert-hook #'my/yas-try-expanding-auto-snippets)
;;
(use-package laas
  :hook (LaTeX-mode . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    "Span" (lambda () (interactive)
                             (yas-expand-snippet "\\Span($1)$0"))
                    ;; add accent snippets
                    :cond #'laas-object-on-left-condition
                    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))))

(after! org (plist-put org-format-latex-options :scale 3)  )

;;; Testing mu4e
;;;

(after! mu4e
(setq mu4e-spam-folder "Spam")

;; Mark as read and move to spam
(add-to-list 'mu4e-marks
             '(spam
               :char       "S"
               :prompt     "Spam"
               :show-target (lambda (target) mu4e-spam-folder)
               :action      (lambda (docid msg target)
                              (mu4e~proc-move docid mu4e-spam-folder "+S-u-N"))))

(mu4e~headers-defun-mark-for spam)
(define-key mu4e-headers-mode-map (kbd "F") 'mu4e-headers-mark-for-spam)
)
(defun end-of-buffer-before-reply ()
  (interactive)
  (re-search-forward "^[^>: \t\n]" nil t)
  (move-beginning-of-line nil))

  ;(goto-char (point-max))
  ;(skip-chars-forward "^[>].*")
  ;; (re-search-forward "^[^>: ]*" nil t)

;;; smerge
;; (setq smerge-command-prefix "SPC")
(setq smerge-command-prefix "\C-cv")

(setq plantuml-jar-path "/home/k11m1/Downloads/plantuml-1.2022.5.jar")
(setq plantuml-default-exec-mode 'jar)
(setq cdlatex-math-modify-alist '((100 "\\mathbb" "\\textbb" t nil nil)))
;(defun org-agenda-color-category (category backcolor forecolor)
;  (let ((re (rx-to-string `(seq bol (0+ space) ,category (1+ space)))))
;    (save-excursion
;      (goto-char (point-min))
;      (while (re-search-forward re nil t)
;        (add-text-properties (match-beginning 0) (match-end 0)
;                             (list 'face (list :background backcolor :foreground forecolor)))))))
;
;(org-agenda-color-category "podzim22:" "RosyBrown1" "red")

;;; Delay company autocomplete
(setq company-idle-delay 1)
;; ;; C
;; (add-hook 'c-mode-hook
;;     (lambda () (setq lsp-enable-indentation nil)
;;         ))
;; ;; C++
;; (add-hook 'c++-mode-hook
;;     (lambda () (setq lsp-enable-indentation nil)
;;         ))
(setq +latex-viewers '(zathura))

;; test gc threshold
(setq gc-cons-threshold 100000000)
;; in $DOOMDIR/config.el
;(defadvice! fixed-doom/backward-delete-whitespace-to-column-a (&rest _)
;  :override #'doom/backward-delete-whitespace-to-column
;  (delete-char -1))

;;; Org-caldav
(setq org-caldav-url
"https://cloud.k11m1.eu/remote.php/dav/calendars/k11m1/" )
;; (setq org-caldav-calendar-id "org-index")
;; (setq org-caldav-inbox "~/org/caldav.org"
;;       org-caldav-files ("~/org/index.org"))

;; (setq org-caldav-calendars
;;   '((:calendar-id "work@whatever" :files ("~/org/work.org")
;;      :inbox "~/org/fromwork.org")
;;     (:calendar-id "stuff@mystuff"
;;      :files ("~/org/sports.org" "~/org/play.org")
;;      :skip-conditions (regexp "soccer")
;;      :inbox "~/org/fromstuff.org")) )
(setq org-caldav-calendars
  '((:calendar-id "org-index" :files ("~/org/index.org" "~/org/podzim22.org")
     :inbox "~/org/caldav.org")
    ) )

(defun +mu4e/capture-msg-to-taskwarrior ()
  "Add a task to Taskwarrior with the description 'Respond to [subject]'.
  The task is tagged with +email and annotated with the message id of the message in mu4e."
  (interactive)
  (let ((msg (mu4e-message-at-point)))
    (when msg
      ;; put the message in Taskwarrior
      (let* ((from (plist-get msg :from))
             (subject (plist-get msg :subject))
             (message-id (plist-get msg :message-id))
             (command (concat "task add"
                              " tags:+email"
                              " description:\"Respond to "
                              subject
                              "\"")))
        (when (consp (car from)) ; Occurs when using mu4e 1.8+.
          (setq from (car from)))
        (unless (keywordp (car from)) ; If using mu4e <= 1.6.
          (setq from (list :name (or (caar from) (cdar from)))))
        (shell-command command)
      ;; annotate the latest task with the message id
      (shell-command (concat "task"
                             " +LATEST"
                             " annotate"
                             " mail:\\<" message-id "\\>"))
      (message "Added task for \"%s\" with tag +email and annotation mail:%s to Taskwarrior"
               (truncate-string-to-width subject 40 nil nil t)
               message-id)))))

(defun org-babel-edit-prep:python (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))

; eh tohle nevypada dobre a je to pomale
;(after! mu4e
;  (mu4e-column-faces-mode))

;(add-to-list 'load-path "~/.doom.d/lisp/mu4e-goodies")
;(require 'mu4e-goodies)
;
;(setq mu4e-goodies-special-field-keywords '((:from . ("xszanisz@fi.muni.cz"))
;                                            (:subject . ("weekly"))))

; mu4e recenter? from telegram

(defun my-mu4e-headers-recenter-view ()
  (when (eq major-mode 'mu4e-headers-mode)
    (recenter)))

(add-hook 'mu4e-view-mode-hook 'my-mu4e-headers-recenter-view)

;(defun my-mu4e-headers-recenter-view ()
;  (when (eq major-mode 'mu4e-headers-mode)
;    (add-hook 'post-command-hook 'recenter nil t)))
;
;(add-hook 'mu4e-headers-mode-hook 'my-mu4e-headers-recenter-view)



;; TODO: Dopracovat skript na capture
;;
(defvar +org-capture-emails-file-klimi "todo.org"
  "Default target for storing mu4e emails captured from within mu4e.
Requires a \"* Email\" heading be present in the file.")

;; Adding emails to the agenda
;; Perfect for when you see an email you want to reply to
;; later, but don't want to forget about
;;;###autoload
(defun +mu4e/capture-msg-to-agenda-klimi (arg)
  "Refile a message and add a entry in `+org-capture-emails-file' with a
deadline.  Default deadline is today.  With one prefix, deadline
is tomorrow.  With two prefixes, select the deadline."
  (interactive "p")
  (let ((sec "^* Email")
        (msg (mu4e-message-at-point)))
    (when msg
      ;; put the message in the agenda
      (with-current-buffer (find-file-noselect
                            (expand-file-name +org-capture-emails-file-klimi org-directory))
        (save-excursion
          ;; find header section
          (goto-char (point-min))
          (when (re-search-forward sec nil t)
            (let (org-M-RET-may-split-line
                  (lev (org-outline-level))
                  (folded-p (invisible-p (point-at-eol)))
                  (from (plist-get msg :from)))
              (when (consp (car from)) ; Occurs when using mu4e 1.8+.
                (setq from (car from)))
              (unless (keywordp (car from)) ; If using mu4e <= 1.6.
                (setq from (list :name (or (caar from) (cdar from)))))
              ;; place the subheader
              (when folded-p (show-branches))    ; unfold if necessary
              (org-end-of-meta-data) ; skip property drawer
              (org-insert-todo-heading 1)        ; insert a todo heading
              (when (= (org-outline-level) lev)  ; demote if necessary
                (org-do-demote))
              ;; insert message and add deadline
              (insert (concat " Respond to "
                              "[[mu4e:msgid:"
                              (plist-get msg :message-id) "]["
                              (truncate-string-to-width
                               (plist-get from :name) 25 nil nil t)
                              " - "
                              (truncate-string-to-width
                               (plist-get msg :subject) 40 nil nil t)
                              "]] "))
              (org-deadline nil
                            (cond ((= arg 1) (format-time-string "%Y-%m-%d"))
                                  ((= arg 4) "+1d")))

              (org-update-parent-todo-statistics)

              ;; refold as necessary
              (if folded-p
                  (progn
                    (org-up-heading-safe)
                    (hide-subtree))
                (hide-entry))))))
      ;; refile the message and update
      ;; (cond ((eq major-mode 'mu4e-view-mode)
      ;;        (mu4e-view-mark-for-refile))
      ;;       ((eq major-mode 'mu4e-headers-mode)
      ;;        (mu4e-headers-mark-for-refile)))
      (message "Refiled \"%s\" and added to the agenda for %s"
               (truncate-string-to-width
                (plist-get msg :subject) 40 nil nil t)
               (cond ((= arg 1) "today")
                     ((= arg 4) "tomorrow")
                     (t         "later"))))))

(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))


;; key binding of org clock
(defun klimi/last-clock ()
  (interactive)
  (org-clock-in-last '(4)))
(map! :leader  "e"  'klimi/last-clock)
(map! :leader  "c RET"  #'recompile)

;; don't continue commens




(setq +default-want-RET-continue-comments nil)
(setq +evil-want-o/O-to-continue-comments nil)

(setq gc-cons-threshold 200000000)
(setq read-process-output-max (* (* 4 1024) 1024)) ;; 4mb

; ORG MODE
(setq org-highest-priority ?A
      org-default-priority ?C
      org-lowest-priority  ?E)
; ORG MODE _ END
