;;; default
;; TODO fix org-download?
;; TODO fix org-drag and drop

(setq org-latex-packages-alist '(("margin=1in" "geometry" nil)))
(setq org-pomodoro-length 30)
(setq org-pomodoro-short-break-length 0)
(setq org-pomodoro-start-sound-args "--volume=30000")
(setq org-pomodoro-keep-killed-pomodoro-time 't) ; a lot of not clocked time due to this...
(setq org-agenda-skip-scheduled-if-deadline-is-shown t) ; TODO: MAYBE REMOVE!!!!
(setq! lsp-headerline-breadcrumb-enable '(project file symbols))

(after! org
  (setq org-agenda-tags-column 90)
(defun ll/org/agenda/color-headers-with (tag col)
  "Color agenda lines matching TAG with color COL."
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward tag nil t)
    ;(unless (find-in-line "\\[#[A-Z]\\]")
      (let ((todo-end (or (ll/org/agenda/find-todo-word-end)
                          (point-at-bol)))
            (tags-beginning (or (find-in-line " :" t)
                                (point-at-eol))))
        (add-text-properties todo-end
                             tags-beginning
                             `(face (:foreground ,col))))))

;; Helper definitions
(setq ll/org/agenda-todo-words
      '("TODO" "GOAL" "NEXT" "STARTED" "WAITING" "REVIEW" "SUBMIT" "WAIT"
        "KILL" "PROG" "DONE" "DEFERRED" "CANCELLED" "INTR" "I" "T" "N" "L"))
(defun find-in-line (needle &optional beginning count)
  "Find the position of the start of NEEDLE in the current line.
  If BEGINNING is non-nil, find the beginning of NEEDLE in the current
  line. If COUNT is non-nil, find the COUNT'th occurrence from the left."
  (save-excursion
    (beginning-of-line)
    (let ((found (re-search-forward needle (point-at-eol) t count)))
      (if beginning
          (match-beginning 0)
        found))))
(defun ll/org/agenda/find-todo-word-end ()
  (reduce (lambda (a b) (or a b))
          (mapcar #'find-in-line ll/org/agenda-todo-words)))

(defun ll/org/colorize-headings ()
  ;; Color all headings with :pers: tan

  (ll/org/agenda/color-headers-with ":unix:" "DodgerBlue3")
  (ll/org/agenda/color-headers-with ":hw:" "DarkOrchid1")
  (ll/org/agenda/color-headers-with ":@emlab:" "yellow")
  ;; and :work: blue
  (ll/org/agenda/color-headers-with ":PA174:" "green"))
(add-hook 'org-agenda-finalize-hook #'ll/org/colorize-headings)
)

;;; fix vertico C-h which key (still doesn't seem to work lol)
  (setq which-key-use-C-h-commands t
        prefix-help-command #'which-key-C-h-dispatch)

  (defadvice! fix-which-key-dispatcher-a (fn &rest args)
    :around #'which-key-C-h-dispatch
    (let ((keys (this-command-keys-vector)))
      (if (equal (elt keys (1- (length keys))) ?\?)
          (let ((keys (which-key--this-command-keys)))
            (embark-bindings (seq-take keys (1- (length keys)))))
        (apply fn args))))

;(setq font-lock-comment-face  '(:family "Terminess Nerd Font Mono"))

;;;; lsp
(after! lsp-mode
  (setq lsp-inlay-hint-enable t)
  (setq  lsp-auto-guess-root nil)
  )

;; (defface my-overlay-face
;;   '((t (:foreground "white" :background "black")))
;;   "Face for my overlay"
;;   :group 'my-faces)

;; (set-face-attribute 'org-overlay-type nil :inherit 'my-overlay-face)

;; (setq agenda-entry-content '(face-modified t))

;; ;; Define a colorful face
;; (defface my-colorful-face
;;   '((t :foreground "blue" :background "yellow" :weight bold))
;;   "Face for a colorful appearance.")

;; ;; Create a plist with the key "face" and the value being the face
;; (setq my-plist `(:face my-colorful-face))


;;; mu4e - no inline images in html emails by default
(setq gnus-inhibit-images 't)

;;; Default
(setq user-full-name "Martin Klimeš"
      user-mail-address "{{ .email }}"

      user-login-name "{{ .chezmoi.username }}")

(setq auto-save-interval 200) ; default is 300

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(setq doom-theme 'doom-one) ; dark theme
;(setq doom-theme 'zaiste) ; light/day theme, credit: https://github.com/zaiste/zaiste-emacs-theme


;; (setq typescript-indent-level 2
;;      js-indent-level 2)
;; (setq typescript-indent-level 2)

;; HACK: doom emacs makes the indent level weird and it sets it to 4 when it doesn't have any reason to do so
(add-hook 'typescript-mode-hook
          (lambda ()
            (make-local-variable 'typescript-indent-level)
            (setq typescript-indent-level 2)))
(setq typescript-indent-level 2)
(setq-default typescript-indent-level 2)
;; (after! typescript-mode
;;   (setq typescript-indent-level 2))

;; (add-hook 'typescript-mode-hook 'my-js-mode-hook)
;; (add-hook 'js-mode-hook 'my-js-mode-hook)


(setq scroll-margin 0) ; 0 everywhere but 5 in mu4e:headers


;; fonts
{{ if eq .chezmoi.hostname "dares"}}
(after! unicode-fonts
  (push "IBM Plex Sans KR" (cadr (assoc "Enclosed Alphanumerics" unicode-fonts-block-font-mapping)))
  (push "Asanb Math monospacified for DejaVu Sans Mono" (cadr (assoc "Miscellaneous Mathematical Symbols-B" unicode-fonts-block-font-mapping)))
  ;; (delete "Noto Color Emoji" doom-emoji-fallback-font-families)
)
{{ end }}
{{ if eq .chezmoi.hostname "k11book" }}
(after! unicode-fonts
  (push "IBM Plex Sans KR" (cadr (assoc "Enclosed Alphanumerics" unicode-fonts-block-font-mapping)))
  (delete "Noto Color Emoji" doom-emoji-fallback-font-families))
{{ end }}

{{ if eq .chezmoi.hostname "dares"}}
;(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 22 :weight 'semi-light))
;(setq doom-font (font-spec :family "Ubuntu Nerd Font Mono" :size 22 :weight 'semi-light))
(setq doom-font (font-spec :family "DejaVuSansM Nerd Font" :size 16 :weight 'semi-light))
;(setq doom-font (font-spec :family "JetBrains Mono" :size 22 :weight 'semi-light))
{{ end }}
{{ if eq .chezmoi.hostname "k11book" }}
;(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'semi-light))
(setq doom-font (font-spec :family "JetBrains Mono" :size 16))
{{ end }}
{{ if eq .chezmoi.hostname "klimovo" }}
;(setq doom-font (font-spec :family "JetBrains Mono" :size 15))
;; (setq doom-font (font-spec :family "Source Code Pro" :size 15))
;;(setq doom-font (font-spec :family "IosevkaTerm Nerd Font" :size 15))
(setq doom-font (font-spec :family "IosevkaTerm NFM" :size 15))
;(setq doom-font (font-spec :size 22))

(defun add-back-emoji-fallback-font-families ()
  (when (fboundp 'set-fontset-font)
    (let ((fn (doom-rpartial #'member (font-family-list))))
      (when-let (font (cl-find-if fn doom-emoji-fallback-font-families))
        (set-fontset-font t 'unicode font nil 'append)))))

(add-hook 'after-setting-font-hook 'add-back-emoji-fallback-font-families)
{{ end }}

(setq doom-unicode-font doom-font)

(setq all-the-icons-scale-factor 1.0) ;; fixes the issue of rightmost characters not fitting.



;; org
;;; Klimi/ORG-MODE

(setq org-image-actual-width (truncate (* (window-pixel-width) 0.25)))

(setq org-directory "~/org/")
(setq org-deadline-warning-days 7)
(setq org-columns-default-format "%TODO %PRIORITY %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM %TAGS")


;;;; ORG - priorities
(setq org-highest-priority ?A
      org-default-priority ?E
      org-lowest-priority  ?F)

(setq klimi/black "black"
          klimi/gray  "DunGray"
          klimi/lgray "gray60"
          klimi/white "white"
          klimi/red "Firebrick"
          klimi/orange "orange red"
          klimi/yellow "lightyellow"
          klimi/green "ForestGreen"
          klimi/lblue "deep sky blue"
          klimi/blue "blue"
          klimi/purple "Purple"
          klimi/brown "brown")
(setq org-priority-faces
      `((?A . (:foreground ,klimi/purple))
        (?B . (:foreground ,klimi/red))
        (?C . (:foreground ,klimi/orange))
        (?D . (:foreground ,klimi/green))
        (?E . (:foreground ,klimi/lblue))
        (?F . (:foreground "tan"))))


;; (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕"))
(after! org
(setq org-fancy-priorities-list '("🅰" "🅱" "🅲" "🅳" "🅴"))
  )

;(setq org-fancy-priorities-list '("[#A]" "[#B]" "[#C]" "[#D]" "[#E]"))
(setq org-fancy-priorities-mode nil)
(after! org
(setq org-fancy-priorities-mode nil)
  )

;;;; org - some config - related to agenda

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 166 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t
      org-agenda-sticky t) ;; don't bury my buffers, i like to return to them

;;;; org-roam
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

;;;; Agenda look
(setq
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000 2200)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")

(after! org
  (defface +klimi-light-blue-bold-face
  '((t :foreground "deep sky blue" :weight bold :underline "deep sky blue"))
  "Face with light blue foreground and bold weight.")
  (defface +klimi-org-done-inactive-face
  '((t :foreground "#5B6268" :weight bold))
  "Face with light blue foreground and bold weight.")

(setq org-todo-keyword-faces '(("[-]" . +org-todo-active)
                               ("STRT" . +org-todo-active)
                               ("TODO" . success)
                               ("DONE" . +klimi-org-done-inactive-face)
                               ("[?]" . +org-todo-onhold)
                               ("WAIT" . +org-todo-onhold)
                               ("HOLD" . +org-todo-onhold)
                               ("PROJ" . +org-todo-project)
                               ("NO" . +org-todo-cancel)
                               ("PROG" . +klimi-light-blue-bold-face)
                               ("P" . +klimi-light-blue-bold-face)
                               ("INTR" . +org-todo-cancel)
                               ("I" . +org-todo-cancel)
                               ("NEXT" . +org-todo-onhold)
                               ("N" . +org-todo-onhold)
                               ("HW" . highlight-numbers-number)
                               ("KILL" . +org-todo-cancel)))
(setq org-todo-keywords '((sequence "HW(h) PROJ(P)" "LOOP(r)" "STRT" "WAIT(w)" "HOLD(h)" "IDEA(I)" "|" "KILL(k@)")
                          (sequence "TODO(t)" "NEXT(n)" "PROG(p)" "INTR(i)" "|" "DONE(d)")
                          (sequence "L(l)" "T" "N" "P" "I" "|" "D" "SCRAP(s)")
                          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
                          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
  )


;;;; org-timed-alerts - org timed alerts [after! org]
; This is the only package that works without much CPU usage because it
; schedules things in advance and rescans only on request!

(after! org
  (require 'org-timed-alerts) ; required in 29.1
  (setq org-timed-alerts-warning-times '(20 10 5))
  (setq org-timed-alerts-final-alert-string "IT IS <span foreground=\"green\">%alert-time</span>\n\nTIME FOR: %todo\n<span foreground=\"blue\">%headline</span>")
  (add-hook 'org-mode-hook #'org-timed-alerts-mode))

;;;; org-super-agenda

; disable header map so i can use the evil from org agenda
(setq org-super-agenda-header-map nil)

(use-package! org-super-agenda
  :commands org-super-agenda-mode)

; NOTE: TEsting of org agenda sort by CREATED

(defun jarfar/org-agenda-cmp-user-defined-created-date (a b)
  "Org Agenda user function to sort tasks based on CREATED property."
  (let* (
          (marker-a (get-text-property 0 'org-marker a))
          (marker-b (get-text-property 0 'org-marker b))
          (time-a (if marker-a (org-entry-get marker-a "CREATED") nil))
          (time-b (if marker-b (org-entry-get marker-b "CREATED") nil)))

    (if (and time-a time-b)
      (if (org-time< time-a time-b)
        -1
        (if (org-time> time-a time-b) 1 nil))
      (if time-a -1 1)
      )))
;
(setq org-agenda-cmp-user-defined 'jarfar/org-agenda-cmp-user-defined-created-date)



(setq org-agenda-custom-commands
      '(
        ("e" "Email"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -1 :tag "email")
                          (:log t)  ; Automatically named "Log"
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -2 :tag "email")
                          (:discard (:anything))
                          )
                       )))
          (alltodo "" ((org-agenda-overriding-header "")
                        (org-agenda-sorting-strategy '((todo user-defined-up)))
                       (org-super-agenda-groups
                        '(
                          (:name "Email" :tag "email" :order 32)
                          (:discard (:anything)))))))         )
        ("T" "test"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t)
                          ;; (:habit t)
                          )
                       )))
          )         )


        ("u" "Unix"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -2)
                          (:log t)  ; Automatically named "Log"
                          (:name "Phone Refil" :tag "PHONE" :order -1)
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -3)
                          ;; (:habit t)
                          (:name "Due soon" :deadline future)
                          (:name "Overdue" :deadline past)
                          (:name "Unimportant" :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH") :order 100)
                          (:name "Waiting..." :todo "unix" :order 1)
                          (:name "Scheduled earlier" :scheduled past))
                       )))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do" :todo "NEXT" :order 1)
                          (:name "Important" :tag "Important" :priority "A" :order 6)
                          ;(:name "Overdue" :deadline past :face error :order 7) TODO: tohle nefunguje s column mode
                          (:name "Overdue" :deadline past  :order 7)
                          (:name "Emails" :tag "email" :order 10)
                          (:name "UnixTodo" :tag "unix" :order 12)
                          (:name "Emacs" :tag "Emacs" :order 13)
                          (:name "Projects" :tag "Project" :order 14)
                          (:name "Research" :tag "Research" :order 15)
                          (:name "To read" :tag "Read" :order 30)
                          (:name "Waiting" :todo "WAITING" :order 20)
                          (:name "University" :tag "uni" :order 32)
                          (:name "Trivial" :priority<= "E" :tag ("Trivial" "Unimportant") :todo ("SOMEDAY" ) :order 90)
                          (:discard (:tag ("muni"))))))))         )
        ("p" "Personal"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -1)
                          (:log t)  ; Automatically named "Log"
                          (:discard (:tag ("unix") :category ("UNIX")))
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -2)
                          ;; (:habit t)
                          (:name "Due soon" :deadline future)
                          (:name "Overdue" :deadline past)
                          (:name "Unimportant" :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH") :order 100)
                          (:name "Waiting..." :todo "unix" :order 1)
                          (:name "Scheduled earlier" :scheduled past))
                       )))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '(
                          (:discard (:tag ("unix") :category ("UNIX")))
                          (:name "Next to do" :todo "NEXT" :order 1)
                          ;; (:name "Phone Refil" :tag "PHONE" :todo () :order -2)
                          ;(:name "Important" :tag "Important" :priority "A" :face (:background "black" :underline t :append t) :order 6)
                          (:name "INTR" :todo ("I" "INTR"))
                          (:name "PROG" :todo ("P" "PROG"))
                          (:name "NEXT" :todo ("N" "NEXT"))
                          (:name "Important" :tag "Important" :priority "A" :order 6)
                          (:name "Overdue" :deadline past :face error :order 7 )
                          (:name "Phone non trivial" :and (:tag "PHONE" :not (:todo "L")))
                           ;; (:discard (:tag ("unix") :category ("UNIX")))
                          ;(:name "Important" :tag "Important" :priority "A" :face :order 6)
                          ;(:name "Overdue" :deadline past :face error :order 7)
                          (:name "Emails" :tag "email" :order 10)
                          (:name "Muni" :tag "muni" :order 12)
                          (:name "Emacs" :tag "Emacs" :order 13)
                          (:name "Projects" :tag "Project" :order 14)
                          (:name "Research" :tag "Research" :order 15)
                          (:name "To read" :tag "Read" :order 30)
                          (:name "Waiting" :todo "WAITING" :order 20)
                          (:name "University" :tag "uni" :order 32)
                          (:name "Trivial" :priority<= "E" :tag ("Trivial" "Unimportant") :todo ("SOMEDAY" ) :order 90)
                          )))))         )
        ("P" "Personal Agenda"
         ((agenda "" ((org-agenda-span 'day)
                      (org-deadline-warning-days 7)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -1)
                          (:log t)  ; Automatically named "Log"
                          (:discard (:tag ("unix") :category ("UNIX")))
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -2)
                          ;; (:habit t)
                          (:name "Due soon" :deadline future)
                          (:name "Overdue" :deadline past)
                          (:name "Unimportant" :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH") :order 100)
                          (:name "Waiting..." :todo "unix" :order 1)
                          (:name "Scheduled earlier" :scheduled past))
                       )))
          (alltodo "" ((org-agenda-overriding-header "")
                       ; FIXME: base on deadline time (org-agenda-sorting-strategy '(todo-state-down priority-down effort-up)
                       (org-super-agenda-groups
                        '(
                          (:name "Homework TODO" :tag ("hw"))
                          (:discard (:tag ("unix") :category ("UNIX")))
                          ;; (:name "Next to do" :todo "NEXT" :order 1)
                          ;; (:name "Phone Refil" :tag "PHONE" :todo () :order -2)
                          ;(:name "Important" :tag "Important" :priority "A" :face (:background "black" :underline t :append t) :order 6)
                          (:name "INTR" :todo ("I" "INTR"))
                          (:name "PROG" :todo ("P" "PROG"))
                          (:name "NEXT" :todo ("N" "NEXT"))
                          ;; (:name "Important" :tag "Important" :priority "A" :order 6)
                          ;; (:name "Overdue" :deadline past :face error :order 7 )
                          ;; (:name "Phone non trivial" :and (:tag "PHONE" :not (:todo "L")))
                           ;; (:discard (:tag ("unix") :category ("UNIX")))
                          ;(:name "Important" :tag "Important" :priority "A" :face :order 6)
                          ;(:name "Overdue" :deadline past :face error :order 7)
                          ;; (:name "Emails" :tag "email" :order 10)
                          ;; (:name "Muni" :tag "muni" :order 12)
                          ;; (:name "Emacs" :tag "Emacs" :order 13)
                          ;; (:name "Projects" :tag "Project" :order 14)
                          ;; (:name "Research" :tag "Research" :order 15)
                          ;; (:name "To read" :tag "Read" :order 30)
                          ;; (:name "Waiting" :todo "WAITING" :order 20)
                          ;; (:name "University" :tag "uni" :order 32)
                          ;; (:name "Trivial" :priority<= "E" :tag ("Trivial" "Unimportant") :todo ("SOMEDAY" ) :order 90)
                          (:discard (:anything t))
                          )))))         )
        ("o" "ALL"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -1)
                          ;; (:habit t
                          ;;         :order 4)
                          (:log t)  ; Automatically named "Log"
                          ;; (:name "Phone Refil" :tag "PHONE" :order -2)
                          (:name "Homeworks & teaching" :tag ("hw" "teaching") :order 0)
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -3)
                          (:name "Overdue" :deadline past)
                          (:name "Scheduled earlier + due soon" :scheduled past :deadline future)
                          (:name "Due soon" :deadline future)
                          (:name "Unimportant" :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH") :order 100)
                          (:name "Waiting..." :todo "unix" :order 1)
                          )
                       )))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '(
                          (:name "Homework TODO" :tag ("hw"))
                          (:name "Next to do" :todo "NEXT" :order 1)
                          ; (:name "Phone Refil" :tag "PHONE" :todo () :order -2)
                          ;(:name "Important" :tag "Important" :priority "A" :face (:background "black" :underline t :append t) :order 6)
                          (:name "INTR" :todo ("I" "INTR"))
                          (:name "PROG" :todo ("P" "PROG"))
                          (:name "NEXT" :todo ("N" "NEXT"))
                          (:name "Important" :tag "Important" :priority "A" :order 6)
                          ;(:name "Overdue" :deadline past :face error :order 7 ) TODO: nefunguje s columns
                          (:name "Overdue" :deadline past  :order 7 )
                          (:name "Phone non trivial" :and (:tag "PHONE" :not (:todo "L")))
                           ;; (:discard (:tag ("unix") :category ("UNIX")))
                          (:name "Emails" :tag "email" :order 10)
                          (:name "Muni" :tag "muni" :order 12)
                          (:name "Emacs" :tag "Emacs" :order 13)
                          (:name "Projects" :tag "Project" :order 14)
                          (:name "Research" :tag "Research" :order 15)
                          (:name "To read" :tag "Read" :order 30)
                          (:name "Waiting" :todo "WAITING" :order 20)
                          (:name "University" :tag "uni" :order 32)
                          (:name "Trivial" :priority<= "E" :tag ("Trivial" "Unimportant") :todo ("SOMEDAY" ) :order 90)
                          ))))) nil ("~/tmp/agenda.export.html")          )
("O" "ALL - only agenda, no todo"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                        '((:name "Timeline"
                           :time-grid t
                           :order -1)
                          ;; (:habit t
                          ;;         :order 4)
                          (:log t)  ; Automatically named "Log"
                          ;; (:name "Phone Refil" :tag "PHONE" :order -2)
                          (:name "Homeworks & teaching" :tag ("hw" "teaching") :order 0)
                          (:name "Today"
                           :deadline today
                           :scheduled today :order -3)
                          (:name "Overdue" :deadline past)
                          (:name "Scheduled earlier + due soon" :scheduled past :deadline future)
                          (:name "Due soon" :deadline future)
                          (:name "Unimportant" :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH") :order 100)
                          (:name "Waiting..." :todo "unix" :order 1)
                          )
                       )))) nil ("~/tmp/agenda.export.whatisthis.idontknow.html")          )
      ))


;;;;; After org-agenda

(after! org-agenda
  (let ((inhibit-message t))
    (org-super-agenda-mode)))




;;;; Org Export Agenda ICS

(setq org-icalendar-combined-agenda-file "~/org/org.ics")
(setq org-icalendar-use-scheduled '(event-if-todo-not-done todo-start))
(setq org-icalendar-use-deadline '(event-if-todo-not-done todo-due))
(setq org-icalendar-scheduled-summary-prefix "📃: ")
;; (setq org-icalendar-deadline-summary-prefix "❗❕: ")
;; (setq org-icalendar-deadline-summary-prefix "🚨🚨: ")
(setq org-icalendar-deadline-summary-prefix "🟥: ")
(setq org-icalendar-exclude-tags '("ics"))

(defun klimi-org-agenda-icalendar-combine-files ()
  "Set `org-agenda-default-appointment-duration' to 30 and call `org-icalendar-combine-agenda-files'."
  (interactive)
  (let ((org-agenda-default-appointment-duration 30))
    (org-icalendar-combine-agenda-files)))

; FIXME: HACK: This is ultra super awful workaround that... works...
(defun klimi/org-icalendar-fix-double-entry (file)
  "Function to run after saving an iCalendar file."
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (while (re-search-forward "VEVENTBEGIN" nil t)
      (replace-match "VEVENT\r\nBEGIN"))
    (write-region (point-min) (point-max) file)
    (message "Modified iCalendar file: %s" file)))

(add-hook 'org-icalendar-after-save-hook 'klimi/org-icalendar-fix-double-entry)


;;;; HACK QUESTION ORG it might not be needed anymore with the categories
;;;; HACK but it is still needed - HACK or maybe not?

;; (find-file "~/org/index.org")
;; (find-file "~/org/unix.org")

;;;; Klimi/jump to org mode file

; TODO add a binding? or something?

(defun klimi/find-file-in-org ()
  (interactive)

        ;; (defun doom-project-browse (org-directory))
  (doom-project-find-file org-directory)
  )

;;;; org-download

(defun my-org-download-method (link)
  (let ((filename
         (file-name-nondirectory
          (car (url-path-and-query
                (url-generic-parse-url link)))))
        (dirname (concat "img/" (file-name-sans-extension (buffer-name)))))
    ;; if directory does not exist, create it
    (unless (file-exists-p dirname)
      (make-directory dirname))
    ;; return the path to save the download files
    (concat dirname "/" filename)
                                        ;(expand-file-name filename dirname)
    ))
;; only modify `org-download-method' in this project
(after! org-download
  (setq org-download-method 'my-org-download-method)
  (setq org-download-link-format "[[file:%s]]\n")
  )

(defun zz/org-download-paste-clipboard (&optional use-default-filename)
  (interactive "P")
  ;; (require 'org-download)
  (let ((file
         (if (not use-default-filename)
             (read-string (format "Filename [%s]: "
                                  org-download-screenshot-basename)
                          nil nil org-download-screenshot-basename)
           nil)))
    (org-download-clipboard file)))



;;; Klimi final newline yasnippet
(defun klimi/disable-final-newline ()
    (interactive)
    (set (make-local-variable 'require-final-newline) nil))

;;; mu4e

;;;; mu4e - gnus article hiding / reply

(setq gnus-treat-hide-citation t)
(setq gnus-cited-lines-visible '(2 . 3))

; HACK replying to message seems to leave [+] in the text, althought the text is whole.
(defun mu4e--disable-hide-citation ()
  (setq gnus-treat-hide-citation nil))

(defun mu4e--enable-hide-citation ()
  (setq gnus-treat-hide-citation t))

;; TODO add hack for PGP sign button also?
(add-hook 'mu4e-compose-pre-hook 'mu4e--disable-hide-citation)
(add-hook 'mu4e-compose-mode-hook 'mu4e--enable-hide-citation)





{{ if eq .chezmoi.hostname "dares" }}
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
{{ end }}

; faster mail download
(setq +mu4e-backend nil)
(after! mu4e
  (setq mu4e-get-mail-command "{{ .chezmoi.homeDir }}/.local/bin/get_mail.sh"))

; disable smart parens because they lag a lot
(add-hook 'mu4e-compose-mode-hook  #'turn-off-smartparens-mode)

;; Klimi: use the date of the sending instead when started composing
    (add-hook 'mu4e-compose-mode-hook (lambda ()
                                        ;; other customizations
                                        (message-remove-header "Date")))



(after! mu4e
  ;; mu4e - accounts
(load "~/.doom.d/mu4eaccounts.el")

  ;; mu4e - sendmail
 (setq sendmail-program "/usr/bin/msmtp"
       send-mail-function 'smtpmail-send-it
       message-sendmail-f-is-evil t
       message-sendmail-extra-arguments '("--read-envelope-from")
       message-send-mail-function 'message-send-mail-with-sendmail)

;;;  mu4e - contacts - NOT USED - I am using automatic
;  (setq mu4e-compose-complete-only-personal 't)
;  (setq mu4e-org-contacts-file  "~/org/contacts.org")
;  (add-to-list 'mu4e-headers-actions
;               '("org-contact-add" . mu4e-action-add-org-contact) t)
;  (add-to-list 'mu4e-view-actions
;               '("org-contact-add" . mu4e-action-add-org-contact) t)

  (setq gnus-icalendar-org-capture-file "~/org/notes.org")
  (setq gnus-icalendar-org-capture-headline '("Calendar"))
  (gnus-icalendar-org-setup)
; DONT forget to include the contact cleaner

;;;; mu4e - main

  (setq mu4e-compose-in-new-frame t)
{{ if eq .chezmoi.hostname "klimovo" }}
 (setq mu4e-update-interval 300)             ;; update every 5 minutes
 {{ end }}
{{ if eq .chezmoi.hostname "dares"}}
 (setq mu4e-update-interval 60)             ;; update every 5 minutes
{{ end }}
 (setq mu4e-view-auto-mark-as-read nil)


 ;;(setq mu4e-headers-thread-first-child-prefix '("o " . "o ")) ; zmena!

;;;; mu4e headers fields
 (setq mu4e-headers-fields
       '(
         (:human-date . 8)
         (:flags . 6)
         (:to . 15)
         (:from-or-to . 20)
         (:recipnum . 2)
         ;(:subject . 94))
         (:account-stripe . 1)
         (:subject . 140))

       +mu4e-min-header-frame-width 143
       mu4e-headers-date-format "%d/%m/%y"
{{ if eq .chezmoi.hostname "klimovo" }}
       mu4e-headers-time-format "⧖ %H:%M"
       mu4e-headers-unread-mark    '("u" . "☐")
{{ end }}
{{ if eq .chezmoi.hostname "dares"}}
       mu4e-headers-time-format " %H:%M"
      mu4e-headers-unread-mark    '("u" . "▰")
{{ end }}
       ;mu4e-headers-time-format "  %H:%M"
       mu4e-search-results-limit 1000
       mu4e-index-cleanup t)
;; (setq mu4e-headers-unread-mark    '("u" . "▰"))
;; (setq mu4e-headers-unread-mark    '("u" . "◊"))
;; (setq mu4e-headers-read-mark    '("u" . "◆"))
;;(setq mu4e-headers-    '("u" . "☑"))


;;; mu4e - bookmarks

 (setq mu4e-bookmarks
 `(
( :name  "unread [a]ll messages"
     :query "flag:unread AND NOT (flag:trashed OR maildir:/{{ .fiemail }}/mailbox.spam)"
     :key ?a)
  (:name "Unread Monitoring" :query ,(concat klimi/mu4e-monitoring-mail-query " and flag:unread") :key ?m)
   ( :name "Today's messages"
     :query "date:today..now"
     :key ?t)
   ( :name "Last 7 days"
     :query "date:7d..now"
     :hide-unread t
     :key ?w)
   ( :name "Messages with images"
     :query "mime:image/*"
     :key ?p)

  ;(:name "Unread messages" :query "flag:unread AND NOT flag:trashed AND NOT /{{ .fiemail }}/mailbox.spam" :key ?u)
  (:name "Yesterday's messages" :query "date:2d..1d" :key ?y)
  (:name "Inbox fi Unread" :query "flag:personal and flag:unread" :key ?i)
  (:name "Inbox fi" :query "flag:personal" :key ?I)
  (:name "CVT important" :query ,(concat klimi/mu4e-important-mail-query " and flag:unread") :key ?c)
  (:name "mailbox.spam1" :query "maildir:/{{ .fiemail }}/mailbox.spam.1" :key ?S)

                ))

 ;; mu4e - colors

  ;; mu4e - bookmarks
(load "~/.doom.d/mu4ebookmarks.el")


 (setq +mu4e-compose-org-msg-toggle-next nil)
;(setq mu4e-alert-icon "/usr/share/icons/Papirus/64x64/apps/evolution.svg")
 (setq message-cite-prefix-regexp "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[>:|]\\)+")

;; mu4e - diary - icalendar test
 (require 'mu4e-icalendar)
 (setq mu4e-icalendar-diary-file "~/org/diary")
 (mu4e-icalendar-setup)

(setq mu4e-alert-interesting-mail-query "flag:unread AND NOT (flag:trashed OR maildir:/xklimes5@fi.muni.cz/mailbox.spam)")

 ;; HACK: mu4e - mu4e-alert FIX


;; (defun mu4e-alert-klimi-grouped-mail-notification-formatter (mail-group all-mails)
;; ;       (when +mu4e-alert-bell-cmd
;; ;         (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd)))
;;   (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd))
;;   (let* ((mail-count (length mail-group))
;;          (total-mails (length all-mails))
;;          (first-mail (car mail-group))
;;          (title-prefix (format "You have [%d/%d] unread email%s"
;;                                mail-count
;;                                total-mails
;;                                (if (> mail-count 1) "s" "")))
;;          (field-value (mu4e-alert--get-group first-mail))
;;          (title-suffix (format (pcase mu4e-alert-group-by
;;                                  (`:from "from %s:")
;;                                  (`:to "to %s:")
;;                                  (`:maildir "in %s:")
;;                                  (`:priority "with %s priority:")
;;                                  (`:flags "with %s flags:"))
;;                                field-value))
;;          (title (format "%s %s\n" title-prefix title-suffix)))
;;     (list :title title
;;           :body (concat "• "
;;                         (s-join "\n• "
;;                                 (mapcar (lambda (mail)
;;                                           (plist-get mail :subject))
;;                                         mail-group))))))
  ;; (setq mu4e-alert-grouped-mail-notification-formatter #'mu4e-alert-klimi-grouped-mail-notification-formatter)
(defun mu4e-alert-default-grouped-mail-notification-formatter (mail-group all-mails)
  "Default function to format MAIL-GROUP for notification.
ALL-MAILS are the all the unread emails"
  (let* ((mail-count (length mail-group))
         (total-mails (length all-mails))
         (first-mail (car mail-group))
         (title-prefix (format "You have [%d/%d] unread email%s"
                               mail-count
                               total-mails
                               (if (> mail-count 1) "s" "")))
         (field-value (mu4e-alert--get-group first-mail))
         (title-suffix (format (pcase mu4e-alert-group-by
                                 (`:from "from %s:")
                                 (`:to "to %s:")
                                 (`:maildir "in %s:")
                                 (`:priority "with %s priority:")
                                 (`:flags "with %s flags:"))
                               field-value))
         (title (format "%s %s\n" title-prefix title-suffix)))
    (list :title title
          :body (concat "• "
                        (s-join "\n• "
                                (mapcar (lambda (mail)
                                          (plist-get mail :subject))
                                        mail-group))))))
  (setq mu4e-alert-grouped-mail-notification-formatter #'mu4e-alert-default-grouped-mail-notification-formatter)

  (defun mu4e-alert-reverse-grouped-mail-sorter (group1 group2)
  "The default function to sort the groups for notification.
GROUP1 and GROUP2 are the group of mails to be sorted.  This function groups
by the date of first mail of group."
  (not (time-less-p (plist-get (car group2) :date)
                    (plist-get (car group1) :date))))

  (setq mu4e-alert-grouped-mail-sorter #'mu4e-alert-reverse-grouped-mail-sorter)

;     (defun +mu4e-alert-test-grouped-mail-notification-formatter-with-bell (mail-group _all-mails)
;       "Default function to format MAIL-GROUP for notification.
; ALL-MAILS are the all the unread emails"
;       (when +mu4e-alert-bell-cmd
;         (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd)))
;       ;(if (> (length mail-group) 1)
;           (let* ((mail-count (length mail-group))
;                  (first-mail (car mail-group))
;                  (title-prefix (format "You have %d unread emails"
;                                        mail-count))
;                  (field-value (mu4e-alert--get-group first-mail))
;                  (title-suffix (format (pcase mu4e-alert-group-by
;                                          (`:from "from %s:")
;                                          (`:to "to %s:")
;                                          (`:maildir "in %s:")
;                                          (`:priority "with %s priority:")
;                                          (`:flags "with %s flags:"))
;                                        field-value))
;                  (title (format "%s %s" title-prefix title-suffix)))
;     (list :title title
;           :body (concat "• "
;                         (s-join "\n• "
;                                 (mapcar (lambda (mail)
;                                           (plist-get mail :subject))
;          ;                               mail-group))))
;          ;   (list :title title
;          ;         :body (s-join "\n"
;          ;                       (mapcar (lambda (mail)
;          ;                                 (format "%s<b>%s</b> • %s"
;          ;                                         ;(cond
;          ;                                         ; ((plist-get mail :in-reply-to) "⮩ ")
;          ;                                         ; ((string-match-p "\\`Fwd:"
;          ;                                         ;                  (plist-get mail :subject)) " ⮯ ")
;          ;                                         ; (t "  "))
;          ;                                         (truncate-string-to-width (plist-get mail :from)
;
;          ;                                                                   20 nil nil t)
;          ;                                         (truncate-string-to-width
;          ;                                          (replace-regexp-in-string "\\`Re: \\|\\`Fwd: " ""
;          ;                                                                    (plist-get mail :subject))
;          ;                                          40 nil nil t)))
;                                         mail-group))))
; ;        (let* ((new-mail (car mail-group))
; ;               (subject (plist-get new-mail :subject))
; ;               (sender (caar (plist-get new-mail :from))))
; ;          (list :title sender :body subject)
; ;          )
;         )
;

;(setq mu4e-alert-grouped-mail-notification-formatter #'+mu4e-alert-test-grouped-mail-notification-formatter-with-bell)







 ;; mu4e - after end
  )
;;; TEST TODO odstranit
;;;
;;;b34d

;;; mu4e - scroll margin - doesn't work much :/
;;

(add-hook 'mu4e-headers-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 15)))
(add-hook 'mu4e-view-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 10)))
(add-hook 'mu4e-main-mode-mode
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 3)))

;;; org publish - WEB

(setq org-export-with-sub-superscripts nil)
(setq org-pandoc-options-for-html5 '((standalone . t) (self-contained . t)))


;; Load the publishing system
(require 'ox-publish)
;; Do the copying manually since this is waaaaaaaaaaay faster than to use the ssh host directly
;; rsync -ravz ~/public_html/ merlin:/var/www/blog/

;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

;; Define the publishing project
(setq org-publish-project-alist
      '(
        ("blog-img"
         :base-directory "~/org/web/img"
         :base-extension "png\\|jpg"
         :recursive t
         :publishing-directory "~/public_html/img"
;     :publishing-directory "/ssh:merlin:/var/www/blog/img"
         :publishing-function org-publish-attachment)

        ("blog-org"
         :base-directory "~/org/web"
         :publishing-directory "~/public_html"
;     :publishing-directory "/ssh:merlin:/var/www/blog"
         :publishing-function org-html-publish-to-html
         :auto-preamble t
         :recursive t
         :exclude "backup"
         :sitemap-title "K11m1's blog"
         :sitemap-filename "index.org"
         :sitemap-sort-files anti-chronologically
         :auto-sitemap t
         :with-author nil           ;; Don't include author name
         :with-creator nil          ;; Include Emacs and Org versions in footer
         :with-toc nil              ;; Don't include a table of contents
         :with-date t
         :section-numbers nil       ;; Don't include section numbers
         :time-stamp-file nil)

        ("myprojectweb" :components("blog-org" "blog-img"))))

;; Do the copying manually since this is waaaaaaaaaaay faster than to use the ssh host directly
;; rsync -ravz ~/public_html/ merlin:/var/www/blog/

;;; org configuration
;;
(after! org

;; org - agenda
(setq org-log-done 'time)
(setq org-log-into-drawer t)

(setq diary-file "~/org/diary")
(setq org-agenda-include-diary t)

; Show today
(setq org-agenda-start-day "+0d")
(setq org-agenda-span 1)

(setq org-agenda-exporter-settings
      '(
      ;  (ps-number-of-columns 2)
      ;  (ps-landscape-mode t)
      ;  (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'inline-css)))

;; org - source block templates (shortcuts)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

;;; org - agenda 2024 configuration
;(setq org-agenda-overriding-columns-format "%60ITEM %TODO %PRIORITY %7EFFORT 100%TAGS")
(setq org-columns-default-format "%60ITEM(Task) %TODO $PRIORITY %9Effort(Estim){:} %8CLOCKSUM{:} %10Budget_day(Daily budget){:} %TAGS")
(setq! org-agenda-time-grid '((daily today require-timed remove-match) (800 1000
        1200 1400 1600 1800 2000) " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))

;; (defun org-columns--summary-sum (values printf)
;;   "Compute half of the sum of VALUES.
;; When PRINTF is non-nil, use it to format the result."
;;   (let ((half-sum (/ (apply #'+ (mapcar #'string-to-number values)) 2)))
;;     (format (or printf "%s") half-sum)))

(setq! org-agenda-todo-ignore-scheduled 'future)
(setq! org-scheduled-past-days 8)
;;; org - org-alert
(setq alert-default-style 'libnotify)
(setq org-alert-interval 300
      org-alert-notify-cutoff 10
      org-alert-notify-after-event-cutoff 10)

;; org - capture templates
(setq org-capture-templates
      '(
        ("t" "Todo" entry (file+headline "~/org/index.org" "Tasks")
         "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n  %a" :prepend t)
        ("s" "Small" entry (file+headline "~/org/index.org" "Small")
         "* L %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n  %a" :prepend t)
("c" ; key
         "Custom" ; description
         entry ; type
         (file+headline "~/org/index.org" "testing") ; target
         "* NEXT %^{Todo} :trivial:
SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))
:PROPERTIES:\n:Created: %U\n:END:\n\n%?" ; template
         :prepend t ; properties
         :empty-lines 1 ; properties
         :created t)
;; ("m" "Meeting"
;;  entry (file+datetree "~/org/calendar.org")
;;  (concat "* %? :meeting:\n<%<%Y-%m-%d %a %^ {Time}>>")
;;  :time-prompt t)
("T" "Todo" entry (file+headline "~/org/index.org" "Tasks")
 "* TODO %^{Prompt}%?\n:PROPERTIES:\n:CREATED: %U\n:END:\nSCHEDULED: %^{Deadline:}t\n  %i\n  %a")
("r" "respond" entry
     (file+headline "~/org/index.org" "Tasks")
     "* NEXT Respond to %:from\n SCHEDULED: %t\n\n %:subject\n %i\n %? \n %a"
     :empty-lines-after 1)
        ("i" "Idea" entry (file+headline "~/org/index.org" "Ideas")
         "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n  %a")
        ("n" "note" entry
     (file "~/org/notes.org")
     "* %U %? :NOTE:\n\n %i\n %a"
     :empty-lines-after 1)
        ("e" "email" entry (file+headline "~/org/todo.org" "Email")
         "* TODO EMAIL: %? %a %^g:email:\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i" :prepend t)
        ("u" "Unix Todo" entry (file+headline "~/org/unix.org" "Tasks")
         "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n  %i\n  %a" :prepend t))
      )

;; INFO: Org - habit
;; (setq org-modules '(org-habit))

;; org - auto save advices
;;

;; TODO: fix this so it really does sove the file... like after 10 sec of the
;; last action? That would be superb!

(defmacro η (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

; this causes the save on weird timings
(advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
(advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
(advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
(advice-add 'org-todo           :after (η #'org-save-all-org-buffers))
(advice-add 'org-clock-in       :after (η #'org-save-all-org-buffers))
(advice-add 'org-clock-out      :after (η #'org-save-all-org-buffers))

(advice-add 'org-agenda-do-date-later      :after (η #'org-save-all-org-buffers))
(advice-add 'org-agenda-kill    :after (η #'org-save-all-org-buffers))
(advice-add 'org-agenda-schedule    :after (η #'org-save-all-org-buffers))

;(advice-remove 'org-deadline       (η #'org-save-all-org-buffers))
;(advice-remove 'org-schedule       (η #'org-save-all-org-buffers))
;(advice-remove 'org-store-log-note (η #'org-save-all-org-buffers))
;(advice-remove 'org-todo           (η #'org-save-all-org-buffers))
;(advice-remove 'org-clock-in       (η #'org-save-all-org-buffers))
;(advice-remove 'org-clock-out      (η #'org-save-all-org-buffers))

;(add-hook 'auto-save-hook 'org-save-all-org-buffers) ; it lags when scrolling (sad)

(setq org-clock-persist t)

;; Org - journal

(setq org-journal-date-format "%a, %Y-%m-%d"
      org-journal-file-format "%Y-%m-%d.org")

;;; org tags

(setq! org-tag-faces '(("hw" . "Green") ("unix" . "deep sky blue") ("@emlab" . "yellow") ("teaching" . "red")))
(setq org-tags-sort-function 'org-string-collate-lessp)


;;; org end [after! end]
  )

;;; Calendar

(defun calendar-helper () ;; doesn't have to be interactive
  (cfw:open-calendar-buffer
   :contents-sources
   (list
        (cfw:org-create-source "Purple")
        (cfw:ical-create-source "unix@fi" "{{ keyring "cfw" "unixfi" }}" "SpringGreen4")
        (cfw:ical-create-source "Google:priv" "{{ keyring "cfw" "google" }}" "DodgerBlue"))))
(defun calendar-init ()
  ;; switch to existing calendar buffer if applicable
  (if-let (win (cl-find-if (lambda (b) (string-match-p "^\\*cfw:" (buffer-name b)))
                           (doom-visible-windows)
                           :key #'window-buffer))
      (select-window win)
    (calendar-helper)))
(defun =my-calendar ()
  "Activate (or switch to) *my* `calendar' in its workspace."
  (interactive)
  (if (modulep! :ui workspaces) ;; create workspace (if enabled)
      (progn
        (+workspace-switch "Calendar" t)
        (doom/switch-to-scratch-buffer)
       (calendar-init)

       (+workspace/display))
    (setq +calendar--wconf (current-window-configuration))

    (delete-other-windows)
    (switch-to-buffer (doom-fallback-buffer))
    (calendar-init)))
(after! calfw

 (setq cfw:render-line-breaker 'cfw:render-line-breaker-simple))

;;; Languages - C/C++

(setq c-default-style "k&r"
      c-basic-offset 4
      indent-tabs-mode nil)


; TODO: Opravdu tohle chci? Pro výuku možná...
; FIXME: doesn't work in other themes (especially light themes)
; (setq font-lock-comment-face  '(:foreground "#b4f7a5"))

;; Langes - C/C++ - oprava enteru na autocomplete
(after! cc
  (dolist (key '("<return>" "RET"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                               cmd)))))

(setq company-auto-complete-chars nil) )

(after! web-mode
  (dolist (key '("<tab>" "TAB"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                               cmd)))))
 (setq company-auto-complete-chars nil)
  )

;; TODO: MAGIT
;;
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))

;;; TODO: diary settings
(add-hook 'calendar-load-hook
          (lambda ()
            (calendar-set-date-style 'european)))

(setq calendar-date-style 'european)
(calendar-set-date-style 'european)

;; ;;; TODO: chezmoi [it doesn't really work atm]


;; (require 'chezmoi)
;; (defun chezmoi--evil-insert-state-enter ()
;;   "Run after evil-insert-state-entry."
;;   (chezmoi-template-buffer-display nil (point))
;;   (remove-hook 'after-change-functions #'chezmoi-template--after-change 1))

;; (defun chezmoi--evil-insert-state-exit ()
;;   "Run after evil-insert-state-exit."
;;   (chezmoi-template-buffer-display nil)
;;   (chezmoi-template-buffer-display t)
;;   (add-hook 'after-change-functions #'chezmoi-template--after-change nil 1))

;; (defun chezmoi-evil ()
;;   (if chezmoi-mode
;;       (progn
;;         (add-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter nil 1)
;;         (add-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit nil 1))
;;     (progn
;;       (remove-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter 1)
;;       (remove-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit 1))))
;; (add-hook 'chezmoi-mode-hook #'chezmoi-evil)

;;; vterm shell
(setq vterm-shell "/bin/zsh")
(setq vterm-tramp-shells '(("docker" "/bin/sh")("sshx" "/bin/bash")))
;(setq vterm-shell (if (file-readable-p "/usr/bin/zsh") "/usr/bin/zsh" "/bin/bash"))

;;; native compilation
(setq native-comp-async-jobs-number 5) ; use 5 cores when native compiling

;;; compilation - hide compilation if successful

 (add-hook 'compilation-start-hook 'compilation-started)
  (add-hook 'compilation-finish-functions 'hide-compile-buffer-if-successful)

  (defcustom auto-hide-compile-buffer-delay 3
    "Time in seconds before auto hiding compile buffer."
    :group 'compilation
    :type 'number
  )

  (defun hide-compile-buffer-if-successful (buffer string)
    (setq compilation-total-time (time-subtract nil compilation-start-time))
    (setq time-str (concat " (Time: " (format-time-string "%s.%3N" compilation-total-time) "s)"))

    (if
      (or
        (string-match ".*exited abnormally.*" string)

        ;; Delete it, if Hide Warnings too.
        (with-current-buffer buffer
          (goto-char (point-min))
          (search-forward "warning" nil t)
        )
      )

      ;;If Warnings/Errors then
      (message (concat "Compiled with Warnings/Errors" time-str))

      ;;If Compiled Successfully then
      (progn
        (bury-buffer buffer)
        (run-with-timer auto-hide-compile-buffer-delay nil 'delete-window (get-buffer-window buffer 'visible))
        (message (concat "Compiled Successfully" time-str))
        (shell-command "notify-send emacs-compilation 'Compilation completed'")
      )
    )
  )

  (make-variable-buffer-local 'compilation-start-time)

  (defun compilation-started (proc)
    (setq compilation-start-time (current-time))
  )

;;; cdlatex (yasnisppet overrides cdlatex in latex mode) [depricated?]
;; (map! :map cdlatex-mode-map
;;       :i "TAB" #'cdlatex-tab)

;;; fix org capture [is it still necessary? It seems to work now...(at least with it)]
;;;
(after! org
  (defadvice! dan/+org--restart-mode-h-careful-restart (fn &rest args)
    :around #'+org--restart-mode-h
    (let ((old-org-capture-current-plist (and (bound-and-true-p org-capture-mode)
                                              (bound-and-true-p org-capture-current-plist))))
      (apply fn args)
      (when old-org-capture-current-plist
        (setq-local org-capture-current-plist old-org-capture-current-plist)
        (org-capture-mode +1)))))

;;; ispell setting
(after! ispell
  (setq ispell-dictionary "cs_CZ,en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "cs_CZ,en_US")
  (setq ispell-dictionary "cs_CZ,en_US") ; no idea but having it here seems to fix it (just the one before is not enough?)


  )

;;; testing


(add-hook! 'LaTeX-mode-hook
          (defun preview-larger-previews ()
            (setq preview-scale-function
                  (lambda () (* 1.25
                           (funcall (preview-scale-from-face)))))))

;; CDLatex settings
(use-package cdlatex
;  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package! yasnippet
;  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets)
         )
  :config
  (use-package! warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package! cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field)
         )
  :config
  (use-package! yasnippet
    :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
    :bind (:map yas-keymap
           ("<tab>" . yas-next-field-or-cdlatex)
           ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))


;; (add-hook 'post-self-insert-hook #'my/yas-try-expanding-auto-snippets)
;;
(use-package laas
  :hook (LaTeX-mode . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    ;; bind to functions!
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    "Span" (lambda () (interactive)
                             (yas-expand-snippet "\\Span($1)$0"))
                    ;; add accent snippets
                    :cond #'laas-object-on-left-condition
                    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))))

(after! org (plist-put org-format-latex-options :scale 3)  )

;;; Testing mu4e
;;;; sub heading mu4e

(after! mu4e
(setq mu4e-spam-folder "/xklimes5@fi.muni.cz/mailbox.spam")
(setq mu4e-change-filenames-when-moving t)
;; Mark as read and move to spam
(add-to-list 'mu4e-marks
             '(spam
               :char       "S"
               :prompt     "Spam"
               :show-target (lambda (target) mu4e-spam-folder)
               :action      (lambda (docid msg target)
                              (mu4e--server-move docid mu4e-spam-folder "+S-u-N"))))
(add-to-list 'mu4e-marks
  '(tag
     :char       "g"
     :prompt     "gtag"
     :ask-target (lambda () (read-string "What tag do you want to add?"))
     :action      (lambda (docid msg target)
                    (mu4e-action-retag-message msg (concat "+" target))
                        (mu4e--server-move docid nil "+S-u-N")
                    )))
(add-to-list 'mu4e-marks
             '(captured
               :char       "C"
               :prompt     "Captured"
               :action      (lambda (docid msg target)
                              (mu4e--server-move docid nil "+S-u-N+F")
                              ;; (org-capture-select-template "e")
                              ;; (org-capture)
                              )))
(add-to-list 'mu4e-marks
  '(later
     :char       "L"
     :prompt     "later"
     :show-target (lambda (target) "later")
     :action      (lambda (docid msg target)
                    ;; must come before proc-move since retag runs
                    ;; 'sed' on the file
                    (mu4e-action-retag-message msg "+later")

                    (mu4e--server-move docid nil "+S-u-N"))))




(defun klimi/org-capture-and-mark-captured ()
  "Capture using defined org-capture templates and mark the captured emails."
  (interactive)
  ;; Save the current cursor position
  (let ((current-position (point)))
    (mu4e-headers-mark-for-captured)
    ;; Restore the cursor position
    (goto-char current-position))
    (org-capture nil "e")
  )



(mu4e~headers-defun-mark-for tag)
(mu4e~headers-defun-mark-for spam)
(mu4e~headers-defun-mark-for later)
(mu4e~headers-defun-mark-for captured)
(map!
 :map mu4e-headers-mode-map

      :m "t g" #'mu4e-headers-mark-for-tag
      :m "t l" #'mu4e-headers-mark-for-later
      :m "t s" #'mu4e-headers-mark-for-spam
      ; :m "t c" #'mu4e-headers-mark-for-captured
      :mn "t c" #'klimi/org-capture-and-mark-captured
      :m "t" #'klimi/org-capture-and-mark-captured
      :m "t t" #'mu4e-headers-mark-for-captured
      :m "f" #'mu4e-headers-mark-for-read ; remaps evil things, but you don't use snipe in headers view, do you
      )
(map!
 :map mu4e-view-mode-map
      :m "f" #'mu4e-view-mark-for-read ; TODO: remaps evil things, you maybe be using this
      :m "t c" #'klimi/org-capture-and-mark-captured
 )

;; (define-key mu4e-headers-mode-map (kbd "t") 'mu4e-headers-mark-for-tag)
;; (define-key mu4e-headers-mode-map (kbd "F") 'mu4e-headers-mark-for-spam)
)
(defun klimi/end-of-buffer-before-reply ()
  (interactive)
  (re-search-forward "^[^>: \t\n]" nil t)
  (move-beginning-of-line nil))

  ;(goto-char (point-max))
  ;(skip-chars-forward "^[>].*")
  ;; (re-search-forward "^[^>: ]*" nil t)

;;; smerge
;; (setq smerge-command-prefix "SPC")
(setq smerge-command-prefix "\C-cv")

{{ if eq .chezmoi.hostname "dares"}}
(setq plantuml-jar-path "/home/k11m1/Downloads/plantuml-1.2022.5.jar")
(setq plantuml-default-exec-mode 'jar)
{{ end }}
(setq cdlatex-math-modify-alist '((100 "\\mathbb" "\\textbb" t nil nil)))
;(defun org-agenda-color-category (category backcolor forecolor)
;  (let ((re (rx-to-string `(seq bol (0+ space) ,category (1+ space)))))
;    (save-excursion
;      (goto-char (point-min))
;      (while (re-search-forward re nil t)
;        (add-text-properties (match-beginning 0) (match-end 0)
;                             (list 'face (list :background backcolor :foreground forecolor)))))))
;
;(org-agenda-color-category "podzim22:" "RosyBrown1" "red")

;;; Delay company autocomplete
(setq company-idle-delay 0.25)
;;(setq company-idle-delay 1.0)
;; ;; C
;; (add-hook 'c-mode-hook
;;     (lambda () (setq lsp-enable-indentation nil)
;;         ))
;; ;; C++
;; (add-hook 'c++-mode-hook
;;     (lambda () (setq lsp-enable-indentation nil)
;;         ))
(setq +latex-viewers '(zathura))

;; test gc threshold
(setq gc-cons-threshold 100000000)
;; in $DOOMDIR/config.el
;(defadvice! fixed-doom/backward-delete-whitespace-to-column-a (&rest _)
;  :override #'doom/backward-delete-whitespace-to-column
;  (delete-char -1))

;;; DEPRICATED Org-caldav
(setq org-caldav-url
"https://cloud.k11m1.eu/remote.php/dav/calendars/k11m1/" )
;; (setq org-caldav-calendar-id "org-index")
;; (setq org-caldav-inbox "~/org/caldav.org"
;;       org-caldav-files ("~/org/index.org"))

;; (setq org-caldav-calendars
;;   '((:calendar-id "work@whatever" :files ("~/org/work.org")
;;      :inbox "~/org/fromwork.org")
;;     (:calendar-id "stuff@mystuff"
;;      :files ("~/org/sports.org" "~/org/play.org")
;;      :skip-conditions (regexp "soccer")
;;      :inbox "~/org/fromstuff.org")) )
(setq org-caldav-calendars
  '((:calendar-id "org-index" :files ("~/org/index.org" "~/org/podzim22.org")
     :inbox "~/org/caldav.org")
    ) )

(defun +mu4e/capture-msg-to-taskwarrior ()
  "Add a task to Taskwarrior with the description 'Respond to [subject]'.
  The task is tagged with +email and annotated with the message id of the message in mu4e."
  (interactive)
  (let ((msg (mu4e-message-at-point)))
    (when msg
      ;; put the message in Taskwarrior
      (let* ((from (plist-get msg :from))
             (subject (plist-get msg :subject))
             (message-id (plist-get msg :message-id))
             (command (concat "task add"
                              " tags:+email"
                              " description:\"Respond to "
                              subject
                              "\"")))
        (when (consp (car from)) ; Occurs when using mu4e 1.8+.
          (setq from (car from)))
        (unless (keywordp (car from)) ; If using mu4e <= 1.6.
          (setq from (list :name (or (caar from) (cdar from)))))
        (shell-command command)
      ;; annotate the latest task with the message id
      (shell-command (concat "task"
                             " +LATEST"
                             " annotate"
                             " mail:\\<" message-id "\\>"))
      (message "Added task for \"%s\" with tag +email and annotation mail:%s to Taskwarrior"
               (truncate-string-to-width subject 40 nil nil t)
               message-id)))))

(defun org-babel-edit-prep:python (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))

; eh tohle nevypada dobre a je to pomale
;(after! mu4e
;  (mu4e-column-faces-mode))

;(add-to-list 'load-path "~/.doom.d/lisp/mu4e-goodies")
;(require 'mu4e-goodies)
;
;(setq mu4e-goodies-special-field-keywords '((:from . ("xszanisz@fi.muni.cz"))
;                                            (:subject . ("weekly"))))

; mu4e recenter? from telegram

(defun my-mu4e-headers-recenter-view ()
  (when (eq major-mode 'mu4e-headers-mode)
    (recenter)))

(add-hook 'mu4e-view-mode-hook 'my-mu4e-headers-recenter-view)

;(defun my-mu4e-headers-recenter-view ()
;  (when (eq major-mode 'mu4e-headers-mode)
;    (add-hook 'post-command-hook 'recenter nil t)))
;
;(add-hook 'mu4e-headers-mode-hook 'my-mu4e-headers-recenter-view)



;; TODO: Dopracovat skript na capture
;;
(defvar +org-capture-emails-file-klimi "todo.org"
  "Default target for storing mu4e emails captured from within mu4e.
Requires a \"* Email\" heading be present in the file.")

;; Adding emails to the agenda
;; Perfect for when you see an email you want to reply to
;; later, but don't want to forget about
;;;###autoload
(defun +mu4e/capture-msg-to-agenda-klimi (arg)
  "Refile a message and add a entry in `+org-capture-emails-file' with a
deadline.  Default deadline is today.  With one prefix, deadline
is tomorrow.  With two prefixes, select the deadline."
  (interactive "p")
  (let ((sec "^* Email")
        (msg (mu4e-message-at-point)))
    (when msg
      ;; put the message in the agenda
      (with-current-buffer (find-file-noselect
                            (expand-file-name +org-capture-emails-file-klimi org-directory))
        (save-excursion
          ;; find header section
          (goto-char (point-min))
          (when (re-search-forward sec nil t)
            (let (org-M-RET-may-split-line
                  (lev (org-outline-level))
                  (folded-p (invisible-p (point-at-eol)))
                  (from (plist-get msg :from)))
              (when (consp (car from)) ; Occurs when using mu4e 1.8+.
                (setq from (car from)))
              (unless (keywordp (car from)) ; If using mu4e <= 1.6.
                (setq from (list :name (or (caar from) (cdar from)))))
              ;; place the subheader
              (when folded-p (show-branches))    ; unfold if necessary
              (org-end-of-meta-data) ; skip property drawer
              (org-insert-todo-heading 1)        ; insert a todo heading
              (when (= (org-outline-level) lev)  ; demote if necessary
                (org-do-demote))
              ;; insert message and add deadline
              (insert (concat " Respond to "
                              "[[mu4e:msgid:"
                              (plist-get msg :message-id) "]["
                              (truncate-string-to-width
                               (plist-get from :name) 25 nil nil t)
                              " - "
                              (truncate-string-to-width
                               (plist-get msg :subject) 40 nil nil t)
                              "]] "))
              (org-deadline nil
                            (cond ((= arg 1) (format-time-string "%Y-%m-%d"))
                                  ((= arg 4) "+1d")))

              (org-update-parent-todo-statistics)

              ;; refold as necessary
              (if folded-p
                  (progn
                    (org-up-heading-safe)
                    (hide-subtree))
                (hide-entry))))))
      ;; refile the message and update
      ;; (cond ((eq major-mode 'mu4e-view-mode)
      ;;        (mu4e-view-mark-for-refile))
      ;;       ((eq major-mode 'mu4e-headers-mode)
      ;;        (mu4e-headers-mark-for-refile)))
      (message "Refiled \"%s\" and added to the agenda for %s"
               (truncate-string-to-width
                (plist-get msg :subject) 40 nil nil t)
               (cond ((= arg 1) "today")
                     ((= arg 4) "tomorrow")
                     (t         "later"))))))

(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))


;; key binding of org clock
(defun klimi/last-clock ()
  (interactive)
  (org-clock-in-last '(4)))
(map! :leader  "e"  'klimi/last-clock)
(map! :leader  "c RET"  #'recompile)

;; don't continue commens

;;; -- COMMENTS FIX
;; Customize org faces
(custom-set-faces
 '(org-agenda-diary ((t (:inherit default :foreground "spring green"))))
 '(org-scheduled-today ((t (:foreground "DarkSlateGray2")))))


(setq +default-want-RET-continue-comments nil)
(setq +evil-want-o/O-to-continue-comments nil)

(setq gc-cons-threshold 200000000)
(setq read-process-output-max (* (* 4 1024) 1024)) ;; 4mb

;;; chezmoi
(require 'chezmoi)
(require 'chezmoi-ediff) ; TODO, I don't think I need it... but...

;;; Outshine - outline minor mode
(add-hook 'emacs-lisp-mode-hook 'outshine-mode)
;;; Small things
;;;; wakatime
(global-wakatime-mode)
{{ if eq .chezmoi.hostname "klimovo" }}
(global-activity-watch-mode)
{{ end }}
;;;; plantuml
(setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
(setq plantuml-default-exec-mode 'jar)
(setq plantuml-output-type "png")
(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
;; (defun plantuml-preview-string (prefix string)
;;   "Preview diagram from PlantUML sources (as STRING), using prefix (as PREFIX)
;; to choose where to display it."
;;   (let* ((imagep (and (display-images-p)
;;                       (plantuml-is-image-output-p)))
;;          (buf (get-buffer-create plantuml-preview-buffer))
;;          (coding-system-for-read (and imagep 'binary))
;;          (coding-system-for-write (and imagep 'binary)))
;;     (with-current-buffer buf
;;       (image-toggle-display-text)
;;       (erase-buffer))
;;     (plantuml-exec-mode-preview-string prefix (plantuml-get-exec-mode) string buf)))





;;; evil snipe
(setq evil-snipe-scope 'buffer) ; evil sneak

;;; dired peep
;; Add the j and k keys to move to next and previous files in peed-dired mode
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

;; Add the key binding SPC d p to toggle peep-dired-mode while in dired (you can add the key binding you like)
(map! :leader
       (:after dired
        (:map dired-mode-map
         :desc "peep mode" "d p" #'peep-dired)))

;;; Tex
(setq TeX-view-program-selection '((output-pdf "Evince")))
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-start-server t)

;;; Dired
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))

(map! :map dired-mode-map :n "C-c o" 'dired-open-file)

(map!  :n "C-e"  'doom/forward-to-last-non-comment-or-eol)
(map!  :v "C-e"  'doom/forward-to-last-non-comment-or-eol)

;;; fix global revert mode

;; (def-package! autorevert
;;   :after-call after-find-file

;;   :config
;;   (setq auto-revert-verbose nil)
;;   (global-auto-revert-mode +1))
(use-package! autorevert
  ;; revert buffers when their files/state have changed
  ;; :hook (focus-in . doom-auto-revert-buffers-h)
  ;; :hook (after-save . doom-auto-revert-buffers-h)
  ;; :hook (doom-switch-buffer . doom-auto-revert-buffer-h)
  ;; :hook (doom-switch-window . doom-auto-revert-buffer-h)
  :config
  (setq auto-revert-verbose t ; let us know when it happens
        ;; auto-revert-use-notify nil
        auto-revert-stop-on-user-input nil
        ;; Only prompts for confirmation when buffer is unsaved.
        revert-without-query (list "."))

  ;; `auto-revert-mode' and `global-auto-revert-mode' would, normally, abuse the
  ;; heck out of file watchers _or_ aggressively poll your buffer list every X
  ;; seconds. Too many watchers can grind Emacs to a halt if you preform
  ;; expensive or batch processes on files outside of Emacs (e.g. their mtime
  ;; changes), and polling your buffer list is terribly inefficient as your
  ;; buffer list grows into the hundreds.
  ;;
  ;; Doom does this lazily instead. i.e. All visible buffers are reverted
  ;; immediately when a) a file is saved or b) Emacs is refocused (after using
  ;; another app). Meanwhile, buried buffers are reverted only when they are
  ;; switched to. This way, Emacs only ever has to operate on, at minimum, a
  ;; single buffer and, at maximum, ~10 buffers (after all, when do you ever
  ;; have more than 10 windows in any single frame?).
  ;; (defun doom-auto-revert-buffer-h ()
  ;;   "Auto revert current buffer, if necessary."
  ;;   (unless (or auto-revert-mode (active-minibuffer-window))
  ;;     (let ((auto-revert-mode t))
  ;;       (auto-revert-handler))))

  ;; (defun doom-auto-revert-buffers-h ()
  ;;   "Auto revert stale buffers in visible windows, if necessary."
  ;;   (dolist (buf (doom-visible-buffers))
  ;;     (with-current-buffer buf
  ;;       (doom-auto-revert-buffer-h))
  ;;     )
  ;;   )
  )


;; (setq auto-revert-avoid-polling t)
;; (setq auto-revert-use-notify t)
;; (after! org
;;         ;; disable Doom's auto-revert-mode customization
;;         (remove-hook! 'focus-in-hook #'doom-try-quiet-auto-revert)
;;         (global-auto-revert-mode)
;;   )
;;         ;; disable Doom's auto-revert-mode customization
;;         (remove-hook! 'focus-in-hook #'doom-try-quiet-auto-revert)
;;         (global-auto-revert-mode)

;; (after! autorevert
;;   (setq auto-revert-mode t) ; Disable lazy auto-reverting
;;   (setq auto-revert-verbose t)
;;   (setq auto-revert-use-notify nil)
;;   (setq auto-revert-stop-on-user-input nil)
;;   (setq revert-without-query '(".")) ; Only prompt for confirmation when buffer is unsaved.
;; )
;; (setq org-agenda-category-icon-alist
;;   '(("UNIX" "")
;;     ("index" "")
;;     ("personal" "")))

;; (setq org-agenda-prefix-format
;;   '((agenda . " %i %-12:c%?-12t% s")
;;     (todo   . " %i %-12:c %?-12t% s")
;;     (tags   . " %i %-12:c")
;;     (search . " %i %-12:c")))

;; (setq org-agenda-category-icon-alist
;;         `(("Personal" ,(list (all-the-icons-material "home" :height 1.0)) nil nil :ascent center)
;;           ("Repeat" ,(list (all-the-icons-material "repeat" :height 1.0)) nil nil :ascent center)
;;           ("UNIX" ,(list (all-the-icons-material "work" :height 1.0 :face 'all-the-icons-blue)) nil nil :ascent center)
;;           ("Events" ,(list (all-the-icons-material "event" :height 1.0)) nil nil :ascent center)
;;           ("Anniv" ,(list (all-the-icons-material "perm_contact_calendar" :height 1.0)) nil nil :ascent center)
;;           ("Birthday" ,(list (all-the-icons-material "cake" :height 1.0)) nil nil :ascent center)
;;           ("Daybook" ,(list (all-the-icons-material "info_outline" :height 1.0)) nil nil :ascent center)
;;           ("Task" ,(list (all-the-icons-material "check_box_outline_blank" :height 1.0)) nil nil :ascent center)
;;           ("Unfiled" ,(list (all-the-icons-material "move_to_inbox" :height 1.0)) nil nil :ascent center)))


;; (load "~/.doom.d/org-clock-budget.el")
(setq org-clock-budget-daily-budgetable-hours 8)
(defun org-clock-budget-interval-today ()
  "Return the interval representing today."
  (let ((start-time (format-time-string "%Y-%m-%d"))
        (end-time (format-time-string "%Y-%m-%d 23:59:59")))
    (cons start-time end-time)))
(setq org-clock-budget-intervals '(("BUDGET_YEAR" org-clock-budget-interval-this-year) ("BUDGET_TODAY" org-clock-budget-interval-today) ("BUDGET_MONTH" org-clock-budget-interval-this-month) ("BUDGET_WEEK" org-clock-budget-interval-this-week)))



;;; Company enter key to C-SPC - beware magic
;; Bind Tab key to complete company selection and unbind enter from it
;;(let ((tab-key (if (display-graphic-p) "<tab>" "TAB")))
;;        (map! :after company-box
;;              :map company-active-map
;;              tab-key #'company-complete-selection
;;              "<return>" nil
;;              "RET" nil
;;              )
;;)

(after! company
  (setq company-minimum-prefix-length 2) ;; set a prefix length to activate completion
  (define-key company-active-map [return] nil) ;; disable Enter key
  (define-key company-active-map (kbd "C-SPC") #'company-complete-selection)
  (map! :map company-active-map
        "RET" nil
        "C-SPC" #'company-complete-selection)
  )

;;; Yasnippet - don't insert newline at the end of the file automatically
(setq require-final-newline nil)


;;; Startup
(global-auto-revert-mode)
(setq epa-file-encrypt-to '("k11m1@klimovo"))

;;; forge
;; (after! forge
;; (add-to-list 'forge-alist
;;              ; ("gitlab.fi.muni.cz" "gitlab.fi.muni.cz/api/v4" "gitlab.fi.muni.cz" forge-gitlab-repository
;;                '("gitlab.fi.muni.cz"
;;                  "gitlab.fi.muni.cz/api/v4"
;;                  "gitlab.fi.muni.cz"
;;                  forge-gitlab-repository))
;;   )

;; (after! forge
;;   (push '("gfi" "gitlab.fi.muni.cz/api/v4"
;;           "gitlab.fi.muni.cz" forge-gitlab-repository) forge-alist))

;; (setq
;;  forge-alist
;;  '(("gitlab.fi.muni.cz" "gitlab.fi.muni.cz/api/v4" "gitlab.fi.muni.cz" forge-gitlab-repository)
;;    ("github.com" "api.github.com" "github.com" forge-github-repository)
;;    ("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository))
;;  )

;; (ghub-request "GET" "/user" nil
;;               :forge 'gitlab
;;               :host "gitlab.fi.muni.cz/api/v4"
;;               :username "xklimes5"
;;               :auth 'forge)

;;(add-to-list 'forge-alist '("gitlab.fi.muni.cz" "gitlab.fi.muni.cz/api/v4" "gitlab.fi.muni.cz" forge-gitlab-repository))

(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
; (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-issues nil t)

;; (emacsql-sqlite-compile 2)


;;; mu4e - automatic update
(after! mu4e
(setq mu4e-update-interval 300)
  )

;;; pb138 tailwind
(use-package! lsp-tailwindcss
        :init
        (setq lsp-tailwindcss-add-on-mode t)
  )
;;; Tabnine
;; (after! typescript-mode
  ;; (set-company-backend! 'typescript-mode '()))
;;(after! company
;;  (setq company-show-numbers t)
;;  (setq +lsp-company-backends '(company-tabnine :separate company-capf company-yasnippet))
;;  ;; (setq +lsp-company-backends '(nine :separate company-capf company-yasnippet))
;;
;;  )
;(use-package! company-tabnine
;  :ensure t
;  :config
;  (add-to-list 'company-backends 'company-tabnine))

(defun klimi/tabnine-off ()
  "turn off TabNine for this buffer"
  (interactive)
  (setq-local company-backends (delete 'company-tabnine company-backends)))

(defun klimi/tabnine-on ()
  "turn on TabNine for this buffer"
  (interactive)
  (setq-local company-backends (add-to-list 'company-backends 'company-tabnine)))


;;; autosave

;(setq auto-save-default t
;      make-backup-files t)




;; (add-to-list 'lsp-language-id-configuration
;;                '(typescript-tsx-mode . "typescriptreact"))

;; (setq lsp-language-id-configuration
;;       `((css-mode . "css")
;;         (html-mode . "html")
;;         (typescript-tsx-mode . "typescript")
;;         (typescript-mode . "typescript")
;;         (tailwindcss-mode . "tailwindcss")))

;;; scratch buffer popup rule

(set-popup-rule! "^\\*doom:scratch"    :side 'bottom :size 0.42)
; config.el
(after! vterm
  (set-popup-rule! "*doom:vterm-popup:frontend*" :size 0.25 :vslot -4 :select t :quit t :ttl 0 :side 'bottom)
  ;; (set-popup-rule! "*doom:vterm-popup:frontend*" :size 0.25 :vslot -4 :select t :quit t :ttl 0 :side 'right)
        (set-popup-rule! "^\\*doom:scratch"    :side 'bottom :size 0.42)
  )


;;; LSP-UI TODO: Tohle nejak zkusit?

;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable nil  ; no more useful than flycheck
;;         lsp-ui-doc-enable nil))     ; redundant with K

;;; keycast
;; (add-to-list 'global-mode-string '("" mode-line-keycast))
;; (use-package keycast
;;   :after (doom-modeline dashboard)
;;   :config
;;   (setq keycast-mode-line-insert-after '(:eval (doom-modeline-format--main)))
;;   (add-to-list 'global-mode-string '("" keycast-mode-line))
;;   :hook
;;   (doom-modeline-mode . keycast-mode-line-mode))


;;; MU4E vol2
(after! mu4e
  (setq mu4e-notification-support t)

  ;;; Temporary fix, doom upstream doesn't support mu 1.10
    (defun klimi/mu4e-view-select-attachment ()
      "Use completing-read to select a single attachment.
Acts like a singular `mu4e-view-save-attachments', without the saving."
      (if-let ((parts (delq nil (mapcar
                                 (lambda (part)
                                   (when (assoc "attachment" (cdr part))
                                     part))
                                 (mu4e--view-gather-mime-parts))))
               (files (+mu4e-part-selectors parts)))
          (cdr (assoc (completing-read "Select attachment: " (mapcar #'car files)) files))
        (user-error (mu4e-format "No attached files found"))))

 ;; (defun klimi/mu4e-view-open-attachment ()
 ;;      "Select an attachment, and open it."
 ;;      (interactive)
 ;;      (mu4e--view-open-file
 ;;       (mu4e--view-mime-part-to-temp-file (cdr (klimi/mu4e-view-select-attachment)))))
 ;;        (map! :map mu4e-view-mode-map
 ;;                :ne "o" #'klimi/mu4e-view-open-attachment)
(defun klimi/mu4e-view-open-attachment ()
  "Select an attachment, and open it."
  (interactive)
  (mu4e--view-open-file
   (mu4e--view-mime-part-to-temp-file (cdr (klimi/mu4e-view-select-attachment)))))

(when (and (boundp 'mu4e-mu-version)
           (version<= "1.10" mu4e-mu-version))
  (map! :map mu4e-view-mode-map
        :ne "o" #'klimi/mu4e-view-open-attachment))




(defun search-for-sender (msg)
  "Search for messages sent by the sender of the message at point."
  (mu4e-search
    (concat "from:"
      (mu4e-contact-email (car (mu4e-message-field msg :from))))))

;; define 'x' as the shortcut
(add-to-list 'mu4e-view-actions
  '("asearch for sender" . search-for-sender) t)






  )


;;; Emacs Everywhere
(setq emacs-everywhere-markdown-apps '("Discord" "Element" "Fractal" "NeoChat" "Slack" "Firefox"))
(setq emacs-everywhere-major-mode-function 'emacs-everywhere-major-mode-org-or-markdown)


;; (remove-hook 'emacs-everywhere-init-hooks #'emacs-everywhere-major-mode-org-or-markdown) ; or #'org-mode if that's what's present
;; (add-hook 'emacs-everywhere-init-hooks #'gfm-mode)

;;; Ansi derivated mode for terminal logs
(define-derived-mode fundamental-ansi-mode fundamental-mode "fundamental ansi"
  "Fundamental mode that understands ansi colors."
  (require 'ansi-color)
  (ansi-color-apply-on-region (point-min) (point-max)))

(defun no-junk-please-were-unixish ()
  (interactive)
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

;;; MU4e GOIMAPNOTIFY
; Thanks to https://tecosaur.github.io/emacs-config/config.html#fetching
(defvar mu4e-reindex-request-file "/tmp/mu_reindex_now"
  "Location of the reindex request, signaled by existance")
(defvar mu4e-reindex-request-min-seperation 5.0
  "Don't refresh again until this many second have elapsed.
Prevents a series of redisplays from being called (when set to an appropriate value)")

(defvar mu4e-reindex-request--file-watcher nil)
(defvar mu4e-reindex-request--file-just-deleted nil)
(defvar mu4e-reindex-request--last-time 0)

(defun mu4e-reindex-request--add-watcher ()
  (setq mu4e-reindex-request--file-just-deleted nil)
  (setq mu4e-reindex-request--file-watcher
        (file-notify-add-watch mu4e-reindex-request-file
                               '(change)
                               #'mu4e-file-reindex-request)))

(defadvice! mu4e-stop-watching-for-reindex-request ()
  :after #'mu4e--server-kill
  (if mu4e-reindex-request--file-watcher
      (file-notify-rm-watch mu4e-reindex-request--file-watcher)))

(defadvice! mu4e-watch-for-reindex-request ()
  :after #'mu4e--server-start
  (mu4e-stop-watching-for-reindex-request)
  (when (file-exists-p mu4e-reindex-request-file)
    (delete-file mu4e-reindex-request-file))
  (mu4e-reindex-request--add-watcher))

(defun mu4e-file-reindex-request (event)
  "Act based on the existance of `mu4e-reindex-request-file'"
  (if mu4e-reindex-request--file-just-deleted
      (mu4e-reindex-request--add-watcher)
    (when (equal (nth 1 event) 'created)
      (delete-file mu4e-reindex-request-file)
      (setq mu4e-reindex-request--file-just-deleted t)
      (mu4e-reindex-maybe t))))

(defun mu4e-reindex-maybe (&optional new-request)
  "Run `mu4e--server-index' if it's been more than
`mu4e-reindex-request-min-seperation'seconds since the last request,"
  (let ((time-since-last-request (- (float-time)
                                    mu4e-reindex-request--last-time)))
    (when new-request
      (setq mu4e-reindex-request--last-time (float-time)))
    (if (> time-since-last-request mu4e-reindex-request-min-seperation)
        (mu4e--server-index nil t)
      (when new-request
        (run-at-time (* 1.1 mu4e-reindex-request-min-seperation) nil
                     #'mu4e-reindex-maybe)))))



;;; UNORDERED:

;;;; Bigger GC
(setq gcmh-high-cons-threshold 104857600)

(setq gc-cons-threshold 104857600)


;;; mu4e - force more txt


  (add-to-list 'mm-discouraged-alternatives "text/html")
  (add-to-list 'mm-discouraged-alternatives "text/richtext")

;;;; emacs 29.1 pixel

; laggy in LSP :(
; (pixel-scroll-precision-mode t)

;;; MU4e

;(defun highlight-urgent ()
;  (highlight-phrase "MIG" 'hi-aquamarine))
;;; take face from M-x list-faces-display
;(highlight-urgent) ;; manually turns on, but read about hooks, could be added as a hook
;(unhighlight-regexp "urgent") ;; maually turns off

;;;; org-roam ui
;(use-package! websocket
;    :after org-roam)
;
;(use-package! org-roam-ui
;    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
;    :config
;    (setq org-roam-ui-sync-theme t
;          org-roam-ui-follow t
;          org-roam-ui-update-on-save t
;          org-roam-ui-open-on-start t))


;;;; org-transclusion
(use-package! org-transclusion
  :after org
  :init
  (map!
   :map global-map "<f12>" #'org-transclusion-add ; TODO maybe remove
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))



;;;; TODO: testing of custom fonts,
; (add-hook 'mu4e-view-mode-hook #'writeroom-mode)
;(remove-hook 'mu4e-view-mode-hook #'writeroom-mode)



;buffer-face-set and buffer-face-mode in Emacs 23 or later is designed for exactly this. From the Emacs wiki:

;; Use variable width font faces in current buffer
 (defun my-buffer-face-mode-variable ()
   "Set font to a variable width (proportional) fonts in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Symbola" :height 100 :width semi-condensed))
   (buffer-face-mode))

 ;; Use monospaced font faces in current buffer
 (defun my-buffer-face-mode-fixed ()
   "Sets a fixed width (monospace) font in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "Inconsolata" :height 100))
   (buffer-face-mode))


;;;; HACK: TRAMP editing
(setq tramp-auto-save-directory nil)


;;;; mu4e github/gitlab action
;; Define a custom mu4e action to open GitHub links
(after! mu4e
  (add-to-list 'mu4e-view-actions
  '("open signature link" . my-mu4e-open-signature-link))
(defun my-mu4e-open-signature-link (msg)
  "Open any URL in the email after the signature line (-- )."
  (interactive)
  (let ((url-regexp "\\(https?://[^[:space:]]+\\)")) ; Match any URL
    (save-excursion
      (goto-char (point-min))
      ;; Look for the signature line
      (when (re-search-forward "^-- $" nil t)
        ;; If signature line found, look for URLs
        (while (re-search-forward url-regexp nil t)
          (let ((url (match-string 1)))
            (browse-url url)))))))
  )

;; holidays
(czech-holidays-add)


;;; mu4e don't close frames after compose - NO! do that cuz it leaves too much mess behind

(after! mu4e
  (setq message-kill-buffer-on-exit t))


;;;; Not working diary calendar integation (needs force sync everytime)
;; (use-package! cdsync :load-path "/home/k11m1/.doom.d/cdsync.el/"
;;   :demand t
;;   :custom
;;   (cdsync-auth-source-host "caldav-credentials") ;; see auth setup
;;   ;; :bind ;; TODO this doesn't work, oops
;;   ;; '("C-c C-o" cdsync-open-diary)
;;   :config
;;   (cdsync-setup-calendar-integration))

;; (add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
;; (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)

;;;; TODO remove
(setq-default flycheck-disabled-checkers '(python-pylint python-flake8))
;; (setq-default flycheck-disabled-checkers '())

;;;; Mu4e - signature PGP setup with highlightings
;; NOTE Maybe it would be nice to use font-lock for this, but it seems that it is using overlays instead of font lock
(setq mm-verify-option 'known)

(after! mu4e


(add-hook 'mu4e-view-rendered-hook
          (lambda ()
           (highlight-regexp "^.*Good signature" 'hi-green)
           (highlight-phrase "Undecided" 'warning)

           ))
  )

;;; mu4e - contact cleaner
(after! mu4e
(defvar klimi-bad-addresses
  '(
    "reply"
    "fi.fi.muni.cz"
    "gitlab.fi.muni.cz"
    ))
(defun klimi-mu4e-contact-cleaner (addr)
  "Clean out junk emails from contacts."
  (if (--any (string-match-p it addr) klimi-bad-addresses)
      nil
    addr))
(setq mu4e-contact-process-function 'klimi-mu4e-contact-cleaner)
  )

;;; JUNK

;; (defface my-overlay-face
;;   '((t (:foreground "white" :background "black")))
;;   "Face for my overlay"
;;   :group 'my-faces)

;; (set-face-attribute 'org-overlay-type nil :inherit 'my-overlay-face)

;; (setq agenda-entry-content '(face-modified t))

;; ;; Define a colorful face
;; (defface my-colorful-face
;;   '((t :foreground "blue" :background "yellow" :weight bold))
;;   "Face for a colorful appearance.")

;; ;; Create a plist with the key "face" and the value being the face
;; (setq my-plist `(:face my-colorful-face))

;; ;; org - wild notification
;(after! org
;
;(org-wild-notifier-mode)
;)
;(setq org-wild-notifier-alert-time '(30 10))

;;; TOOO karel

;(load "/home/k11m1/.doom.d/karel.el/karel-mode.el")


(defconst karel-mode-syntax-table
  (let ((table (make-syntax-table)))
    ;; # is a comment starter
    (modify-syntax-entry ?# "<" table)
    ;; \n is a comment ender
    (modify-syntax-entry ?\n ">" table)
    table))

(eval-when-compile
  (require 'rx))

(defconst karel--font-lock-defaults
  (let ((keywords '("DEFINE" "END" "RUN"))
        (builtins '("PUT" "LEFT" "RIGHT" "SKIP" "TAKE" "IFWALL" "IFMARK" "STEP"))
        (types '()))
    `(((,(rx-to-string `(: (or ,@keywords))) 0 font-lock-keyword-face)
       (,(rx-to-string `(: (or ,@builtins))) 0 font-lock-builtin-face)
       ("\\([a-z][[:word:]]+\\)" 1 font-lock-function-name-face)))))

(define-derived-mode karel-mode prog-mode "Karel"
  :syntax-table karel-mode-syntax-table
  (setq font-lock-defaults karel--font-lock-defaults)
  (font-lock-fontify-buffer))

(add-to-list 'auto-mode-alist '("\\.karel" . karel-mode))

;;; verilog


(use-package! verilog-ext
  :hook ((verilog-mode . verilog-ext-mode))
  :init
  ;; Can also be set through `M-x RET customize-group RET verilog-ext':
  ;; Comment out/remove the ones you do not need
  (setq verilog-ext-feature-list
        '(font-lock
          xref
          capf
          hierarchy
          eglot
          lsp
          flycheck
          beautify
          navigation
          template
          formatter
          compilation
          imenu
          which-func
          hideshow
          typedefs
          time-stamp
          block-end-comments
          ports))
  :config
  (verilog-ext-mode-setup))


;;; org mode jump to heading org-goto
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)

;;; TODO TMP NOT YET USED FOR MU4e 12
;; https://github.com/djcb/mu/issues/2665

;; (defun supersede-or-compose-reply-ask-wide ()
;;   "Supersede own messages or ask whether to reply-to-all."
;;   (interactive)
;;   (if (mu4e-message-contact-field-matches-me (mu4e-message-at-point) :from)
;;       (mu4e-compose-supersede)
;;     (let ((tos (length (mu4e-message-field-at-point :to)))
;;           (ccs (length (mu4e-message-field-at-point :cc))))
;;       (mu4e-compose-reply
;;        (and (> (+ tos ccs) 1)
;;             (yes-or-no-p "Reply to all?"))))))

;; (custom-set-faces
;;   `(mu4e-unread-face ((t (:foreground ,(doom-color 'green)))))
;;   )

;;; Not working - org color agenda category
;; (defun org-agenda-color-category (category backcolor forecolor)
;;   (let ((re (rx-to-string `(seq bol (0+ space) ,category (1+ space)))))
;;     (save-excursion
;;       (goto-char (point-min))
;;       (while (re-search-forward re nil t)
;;         (add-text-properties (match-beginning 0) (match-end 0)
;;                              (list 'face (list :background backcolor :foreground forecolor)))))))

;; (add-hook 'org-finalize-agenda-hook
;;   (lambda ()
;;     (save-excursion
;;         (org-agenda-color-category "[M]Trh:" "RosyBrown1" "green")
;;       )))

(add-hook 'org-agenda-finalize-hook
  (lambda ()
    (save-excursion
      (color-org-header "[M]Trh:" "azure" "black")
      (color-org-header "Work:" "RosyBrown1" "red"))))

(defun color-org-header (tag backcolor forecolor)
  ""
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward tag nil t)
    (add-text-properties (match-beginning 0) (+ (match-beginning 0) 10)
                     `(face (:background, backcolor, :foreground, forecolor)))))
