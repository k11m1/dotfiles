#+property: header-args:elisp :tangle yes :comments link
** Default
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Martin Klimeš"
      user-mail-address "k11m1@k11m1.eu"
      user-login-name "k11m1")

;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-deadline-warning-days 7)

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;; Each path is relative to the path of the maildir you passed to mu

(setq org-columns-default-format "%60ITEM(Task) %6Effort(Estim){:}")






; Org Roam
;(org-roam-complete-everywhere t)
;(setq org-plantuml-jar-path (expand-file-name "/home/k11m1/Downloads/plantuml-1.2022.5.jar"))
(setq plantuml-jar-path "/home/k11m1/Downloads/plantuml-1.2022.5.jar")
(setq plantuml-default-exec-mode 'jar)

#+end_src
** Wakatime
#+begin_src elisp
(global-wakatime-mode)
#+end_src
** Fonts
#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 22 :weight 'semi-light))
;(setq doom-font (font-spec :family "Fira Code" :size 22 :weight 'semi-light)
;      doom-unicode-font (font-spec :family "Noto Sans"))

;(push "IBM Plex Sans KR" (cadr (assoc "Enclosed Alphanumerics" unicode-fonts-block-font-mapping)))
(after! unicode-fonts
  (push "IBM Plex Sans KR" (cadr (assoc "Enclosed Alphanumerics" unicode-fonts-block-font-mapping)))
        )

(setq doom-font (font-spec :family "JetBrains Mono" :size 22 :weight 'semi-light))
;(setq doom-font (font-spec :family "JetBrains Mono" :size 22))
;(setq doom-font (font-spec :family "Fira Mono" :size 22 :weight 'semi-light))

(setq doom-unicode-font doom-font)
;(setq doom-font (font-spec :family "Hasklug Nerd Font Mono" :size 22 :weight 'semi-light)
;      doom-unicode-font (font-spec :family "Noto Sans"))
 ; (push "Noto Sans" (cadr (assoc "Letterlike Symbols" unicode-fonts-block-font-mapping))))
;(setq doom-unicode-font doom-font)
#+end_src

* mu4e
** accounts
#+begin_src elisp
(load "~/.doom.d/mu4eaccounts.el")

(setq sendmail-program "/usr/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail)
#+end_src
** Paralelism get mail update
#+begin_src elisp
(after! mu4e
        (setq mu4e-get-mail-command "~/.local/bin/get_mail.sh"))
#+end_src
** Org contacts
#+begin_src elisp
(after! mu4e
(setq mu4e-compose-complete-only-personal 't)
 (setq mu4e-org-contacts-file  "~/org/contacts.org")
  (add-to-list 'mu4e-headers-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
    '("org-contact-add" . mu4e-action-add-org-contact) t)

(setq gnus-icalendar-org-capture-file "~/org/notes.org")
(setq gnus-icalendar-org-capture-headline '("Calendar"))
(gnus-icalendar-org-setup)
)
#+end_src
** scroll margin
#+begin_src elisp
(add-hook 'mu4e-headers-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 5)))
 (add-hook 'mu4e-main-mode-mode
           (lambda ()
             (make-local-variable 'scroll-margin)
             (setq scroll-margin 3)))
#+end_src

** customization
#+begin_src elisp

(after! mu4e
;(setq mu4e-update-interval 3600)             ;; update every 5 minutes
(setq mu4e-update-interval 60)             ;; update every 5 minutes

;(setq mu4e-headers-thread-first-child-prefix '("o " . "⚬ "))
(setq mu4e-headers-thread-first-child-prefix '("o " . "o ")) ; zmena!
;(setq mu4e-headers-thread-single-orphan-prefix '("─>" . "─▶")
;        mu4e-headers-thread-orphan-prefix '("┬>" . "┬▶ ")
;        mu4e-headers-thread-last-child-prefix '("└>" . "╰▶")
;        mu4e-headers-thread-child-prefix '("├>" . "├▶")
;        mu4e-headers-thread-connection-prefix '("│" . "│ ")
;        )
  (setq mu4e-headers-fields
        '(
;          (:klimi-stripe . 1)
          (:account-stripe . 1)
          (:human-date . 8)
          (:flags . 6)
          (:to . 15)
          (:from-or-to . 20)
                                        ;        (:folder . 10)
          (:recipnum . 2)
          (:subject . 94)
          )
        +mu4e-min-header-frame-width 143
        mu4e-headers-date-format "%d/%m/%y"
        ;mu4e-headers-time-format "⧖ %H:%M"
        mu4e-headers-time-format "  %H:%M"
        mu4e-headers-results-limit 1000
        mu4e-index-cleanup t)

  (add-to-list 'mu4e-bookmarks
               '(:name "Yesterday's messages" :query "date:2d..1d" :key ?y) t)
  (add-to-list 'mu4e-bookmarks
               '(:name "Inbox fi" :query "maildir:/xklimes5@fi.muni.cz/INBOX" :key ?i) t)
  (add-to-list 'mu4e-bookmarks
               '(:name "CVT important" :query "(maildir:/xklimes5@fi.muni.cz/CVT/Unix OR maildir:/xklimes5@fi.muni.cz/CVT/cvt) and flag:unread" :key ?c) t)
  (add-to-list 'mu4e-bookmarks
               '(:name "Unread Monitoring" :query "maildir:/xklimes5@fi.muni.cz/Monitoring/ and flag:unread" :key ?m) t)

(setq sendmail-program "/usr/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail)


) ; end of after!
#+end_src
** colors
#+begin_src elisp

(after! mu4e

(setq +mu4e-compose-org-msg-toggle-next nil)
(setq mu4e-cited-regexp "^\\(\\([[:alpha:]]+\\)\\|\\( *\\)\\)\\(\\([>:]+ ?\\)+\\)")
;(setq mu4e-cited-regexp "^([   ]*[|>:}#])+")


;(setq mu4e-alert-icon "/usr/share/icons/Papirus/64x64/apps/evolution.svg")



(setq mu4e-cited-regexp "^\\(\\([[:alpha:]]+\\)\\|\\( *\\)\\)\\(\\([>:]+ ?\\)+\\)")
(setq message-cite-prefix-regexp "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[>:|]\\)+")
  (setq mu4e-view-auto-mark-as-read nil)
)
#+end_src
** mu4e colorful account inbox
#+begin_src elisp :tangle no
(after! mu4e
  (setq my-mu4e-contact-faces-list
      '(("xklimes5@fi.muni.cz" 'all-the-icons-dgreen)
        ("klimes@fi.muni.cz" 'all-the-icons-green)))


  (setq mu4e-header-info-custom
        '((:account .
           (:name "Account"
            :shortname "Account"
            :help "which account/maildir this email belongs to"
            :function
            (lambda (msg)
              (let ((maildir (replace-regexp-in-string
                              "\\`/?\\([^/]+\\)/.*\\'" "\\1"
                              (mu4e-message-field msg :maildir))))
                (+mu4e-colorize-str
                 (replace-regexp-in-string
                  "^gmail"
                  (propertize "g" 'face 'bold-italic)
                  maildir)
                 '+mu4e-header--maildir-colors
                 maildir)))))
          (:account-stripe .
           (:name "Account"
            :shortname "▐"
            :help "Which account/maildir this email belongs to"
            :function
            (lambda (msg)
              (let ((account
                     (replace-regexp-in-string
                      "\\`/?\\([^/]+\\)/.*\\'" "\\1"
                      (mu4e-message-field msg :maildir))))
                (propertize
                 (+mu4e-colorize-str "▌" '+mu4e-header--maildir-colors account)
                 'help-echo account)))))

          (:klimi-stripe .
           (:name "InboxStripe"
            :shortname "▐"
            :help "If this mail is in our inbox."
            :function
            (lambda (msg)

             (let* ((in-to1 (rassoc "klimes@fi.muni.cz" (mu4e-message-field msg :to)))
                    (in-to2 (rassoc "xklimes5@fi.muni.cz" (mu4e-message-field msg :to)))
                    (in-cc1 (rassoc "klimes@fi.muni.cz" (mu4e-message-field msg :cc)))
                    (in-cc2 (rassoc "xklimes5@fi.muni.cz" (mu4e-message-field msg :cc)))
                    (cface   (if in-to1
                                 'all-the-icons-red
                               (if in-to2 'all-the-icons-red
                                 (if in-cc1 'all-the-icons-green
                                   (if in-cc2 'all-the-icons-green 'mu4e-footer-face))))))



               (propertize "▐"  'face cface)))))

          (:recipnum .
           (:name "Number of recipients"
            :shortname " ⭷"
            :help "Number of recipients for this message"
            :function
            (lambda (msg)
              (propertize (format "%2d"
                                  (+ (length (mu4e-message-field msg :to))
                                     (length (mu4e-message-field msg :cc))))
                          'face 'mu4e-footer-face)))))))

#+end_src
** diary icalendar test
#+begin_src elisp
(after! mu4e

(require 'mu4e-icalendar)
(setq mu4e-icalendar-diary-file "~/org/diary")
(mu4e-icalendar-setup)
                )
#+end_src

** mu4e-alert
#+begin_src elisp
(defun mu4e-alert-klimi-grouped-mail-notification-formatter (mail-group all-mails)
  (start-process "mu4e-alert-bell" nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd))
  (let* ((mail-count (length mail-group))
         (total-mails (length all-mails))
         (first-mail (car mail-group))
         (title-prefix (format "You have [%d/%d] unread email%s"
                               mail-count
                               total-mails
                               (if (> mail-count 1) "s" "")))
         (field-value (mu4e-alert--get-group first-mail))
         (title-suffix (format (pcase mu4e-alert-group-by
                                 (`:from "from %s:")
                                 (`:to "to %s:")
                                 (`:maildir "in %s:")
                                 (`:priority "with %s priority:")
                                 (`:flags "with %s flags:"))
                               field-value))
         (title (format "%s %s\n" title-prefix title-suffix)))
    (list :title title
          :body (concat "• "
                        (s-join "\n• "
                                (mapcar (lambda (mail)
                                          (plist-get mail :subject))
                                        mail-group))))))
(after! mu4e
  (setq mu4e-alert-grouped-mail-notification-formatter #'mu4e-alert-klimi-grouped-mail-notification-formatter))

#+end_src

* Org
** Org-publish
#+begin_src elisp
(setq org-export-with-sub-superscripts nil)
(setq org-pandoc-options-for-html5 '((standalone . t) (self-contained . t)))


;; Load the publishing system
(require 'ox-publish)

;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

;; Define the publishing project
(setq org-publish-project-alist
      '(
        ("blog-img"
         :base-directory "~/org/web/img"
         :base-extension "png\\|jpg"
         :publishing-directory "~/public_html/img"
;     :publishing-directory "/ssh:merlin:/var/www/blog/img"
         :publishing-function org-publish-attachment)

        ("blog-org"
         :base-directory "~/org/web"
         :publishing-directory "~/public_html"
;     :publishing-directory "/ssh:merlin:/var/www/blog"
         :publishing-function org-html-publish-to-html
         :auto-preamble t
         :recursive t
         :sitemap-title "K11m1's blog"
         :sitemap-filename "index.org"
         :sitemap-sort-files anti-chronologically
         :auto-sitemap t
         :with-author nil           ;; Don't include author name
         :with-creator nil          ;; Include Emacs and Org versions in footer
         :with-toc nil              ;; Don't include a table of contents
         :section-numbers nil       ;; Don't include section numbers
         :time-stamp-file nil)

        ("myprojectweb" :components("blog-org" "blog-img"))))
#+end_src
** After! org block
Everything goes into `after! org`
#+BEGIN_SRC elisp :tangle yes :noweb no-export
(after! org
  <<org-conf>>
  )
#+END_SRC
** Configuration
:PROPERTIES:
  :header-args: :noweb-ref org-conf
  :END:
*** Org Agenda
#+begin_src elisp
;(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)

(setq diary-file "~/org/diary")
(setq org-agenda-include-diary t)

; Show today
(setq org-agenda-start-day "+0d")
(setq org-agenda-span 1)
#+end_src
*** Source block templates
#+begin_src elisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src elisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src
*** Org wild notifications
#+begin_src elisp
(setq alert-default-style 'notifications)
(org-wild-notifier-mode)
(setq org-wild-notifier-alert-time '(15 5))
#+end_src

*** Org capture templates
#+begin_src elisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/index.org" "Tasks")
         "* TODO %?\n:CREATED: %U\n  %i\n  %a")
        ("u" "Unix Todo" entry (file+headline "~/org/unix.org" "Tasks")
         "* TODO %?\n:CREATED: %U\n  %i\n  %a")
        ;("j" "Journal" entry (file+datetree "~/org/journal.org")
        ; "* %?\nEntered on %U\n  %i\n  %a")
                ))
;; ("P" "Research project" entry (file "~/Org/inbox.org")
;; 	 "* TODO %^{Project title} :%^G:\n:PROPERTIES:\n:CREATED: %U\n:END:\n%^{Project description}\n** TODO Literature review\n** TODO %?\n** TODO Summary\n** TODO Reports\n** Ideas\n" :clock-in t :clock-resume t)
;; 	("e" "Email" entry (file "~/Org/inbox.org")
;; 	 "* TODO %? email |- %:from: %:subject :EMAIL:\n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n" :clock-in t :clock-resume t)
;; 	("b" "Link from browser" entry (file "~/Org/inbox.org")
;; 	 "* TODO %? |- (%:description) :BOOKMARK:\n:PROPERTIES:\n:CREATED: %U\n:Source: %:link\n:END:\n%i\n" :clock-in t :clock-resume t)
;; 	("s" "Selection from browser" entry (file "~/Org/inbox.org")
;; 	 "* TODO %? :BOOKMARK:\n%(replace-regexp-in-string \"\n.*\" \"\" \"%i\")\n:PROPERTIES:\n:CREATED: %U\n:Source: %:link\n:END:\n%i\n" :clock-in t :clock-resume t)
;; 	("h" "Habit" entry (file "~/Org/inbox.org")
;; 	 "* NEXT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:CREATED: %U\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n%U\n")
#+end_src
*** Org habit
#+begin_src elisp
(setq org-modules '(org-habit))
#+end_src
*** Saving
#+begin_src elisp
(defmacro η (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

(advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
(advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
(advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
(advice-add 'org-todo           :after (η #'org-save-all-org-buffers))




(setq org-clock-persist t)
#+end_src
*** Org Journal
#+begin_src elisp
(setq org-journal-date-format "%a, %Y-%m-%d"
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

* 4 spaces
#+begin_src elisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
;(setq indent-line-function 'insert-tab)

#+end_src
* CPP
#+begin_src elisp
                                        ;(defun my-c-mode-common-hook ()
                                        ; ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
                                        ; (c-set-offset 'substatement-open 0)
                                        ; ;; other customizations can go here
                                        ;
                                        ; (setq c++-tab-always-indent t)
                                        ; (setq c-basic-offset 4)                  ;; Default is 2
                                        ; (setq c-indent-level 4)                  ;; Default is 2
                                        ;
                                        ; (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
                                        ; (setq tab-width 4)
                                        ; (setq indent-tabs-mode t)  ; use spaces only if nil
                                        ; )
                                        ;
                                        ;(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

                                        ; More info on https://www.emacswiki.org/emacs/IndentingC
(setq c-default-style "k&r"
      c-basic-offset 4
      indent-tabs-mode nil)
                                        ;(c-set-offset 'substatement-open 0)
                                        ;(setq font-lock-comment-face  '(:foreground "pale goldenrod"))
                                        ;(setq font-lock-comment-face  '(:foreground "light yellow"))
                                        ;(setq font-lock-comment-face  '(:foreground "RosyBrown1"))

                                        ;(setq font-lock-comment-face  '(:foreground "LightGoldenrod1"))
                                        ;(setq font-lock-comment-face  '(:foreground "honeydew2"))
                                        ;(setq font-lock-comment-face  '(:foreground "burlywood1"))
                                        ;(setq font-lock-comment-face  '(:foreground "burlywood1"))
                                        ;(setq font-lock-comment-face  '(:foreground "#f8f5a1"))
                                        ;(setq font-lock-comment-face  '(:foreground "khaki1"))
                                        ;(setq font-lock-comment-face  '(:foreground "khaki1"))
                                        ;(setq font-lock-comment-face  '(:foreground "DarkOliveGreen1"))

                                        ;(setq font-lock-comment-face  '(:foreground "PeachPuff1"))
                                        ;(setq font-lock-comment-face  '(:foreground "#dbff82"))
                                        ;(setq font-lock-comment-face  '(:foreground "#b2ff9c"))
                                        ;(setq font-lock-comment-face  '(:foreground "#baff80"))

                                        ;(setq font-lock-comment-face  '(:foreground "#fff0a1"))
                                        ;(setq font-lock-comment-face  '(:foreground "#79fc7d"))
                                        ;(setq font-lock-comment-face  '(:foreground "#c4fc8d"))
                                        ;(setq font-lock-comment-face  '(:foreground "#b9e599"))
(setq font-lock-comment-face  '(:foreground "#b4f7a5"))

(after! cc
  (dolist (key '("<return>" "RET"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                               cmd)))))
 (setq company-auto-complete-chars nil))


#+end_src

* Autosave
#+begin_src elisp
(setq auto-save-interval 150); default 300
#+end_src
* MAGIT
#+begin_src elisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src
* UPLOAD
#+begin_src elisp
;((nil . ((ssh-deploy-root-local . "/home/k11m1/unix/public_html")
;         (ssh-deploy-root-remote . "/ssh:anxur:/home/xklimes5/public_html")
;         (ssh-deploy-on-explicit-save . t))))
#+end_src

* Czech holidays in Diary
#+begin_src elisp
(czech-holidays-add)
#+end_src
* Tramp
#+begin_src elisp
(setq auth-sources nil)
#+end_src
* Scroll margin
#+begin_src elisp
(setq scroll-margin 0) ; 0 everywhere but 5 in mu4e:headers
#+end_src

* Calendar
#+begin_src elisp

;; line break
(defun calendar-helper () ;; doesn't have to be interactive
  (cfw:open-calendar-buffer
   :contents-sources
   (list
        (cfw:org-create-source "Purple")
        (cfw:ical-create-source "unix@fi" "{{ keyring "cfw" "unixfi" }}" "SpringGreen4")
        (cfw:ical-create-source "Google:priv" "{{ keyring "cfw" "google" }}" "DodgerBlue"))))
(defun calendar-init ()
  ;; switch to existing calendar buffer if applicable
  (if-let (win (cl-find-if (lambda (b) (string-match-p "^\\*cfw:" (buffer-name b)))
                           (doom-visible-windows)
                           :key #'window-buffer))
      (select-window win)
    (calendar-helper)))
(defun =my-calendar ()
  "Activate (or switch to) *my* `calendar' in its workspace."
  (interactive)
  (if (featurep! :ui workspaces) ;; create workspace (if enabled)
      (progn
        (+workspace-switch "Calendar" t)
        (doom/switch-to-scratch-buffer)
       (calendar-init)

       (+workspace/display))
    (setq +calendar--wconf (current-window-configuration))

    (delete-other-windows)
    (switch-to-buffer (doom-fallback-buffer))
    (calendar-init)))
(after! calfw

 (setq cfw:render-line-breaker 'cfw:render-line-breaker-simple))


#+end_src

* TODO Abreviation mode
#+begin_src elisp
;(define-abbrev-table 'global-abbrev-table '(
;    ("alpha" "α")
;    ("inf" "∞")
;    ("ar" "→")
;    ))
;(abbrev-mode 1) ; turn on abbrev mode

#+end_src

* users scripts WIP
** center comment box text
#+begin_src elisp
(defun center-rectangle (beg end)
  (interactive "*r")
  (kill-rectangle beg end)
  (with-temp-buffer
    (yank-rectangle)
    (setq fill-column (current-column))
    (center-region (point-min) (point-max))
    (goto-char (point-max))
    (move-to-column fill-column t)
    (kill-rectangle (point-min) (point)))
  (goto-char beg)
  (yank-rectangle))
#+end_src
* diary
#+begin_src elisp
    (add-hook 'calendar-load-hook
              (lambda ()
                (calendar-set-date-style 'european)))

(setq calendar-date-style 'european)
(calendar-set-date-style 'european)
  ;  (european-calendar)
#+end_src

* Chezmoi.el
#+begin_src elisp
(require 'chezmoi)
(defun chezmoi--evil-insert-state-enter ()
  "Run after evil-insert-state-entry."
  (chezmoi-template-buffer-display nil (point))
  (remove-hook 'after-change-functions #'chezmoi-template--after-change 1))

(defun chezmoi--evil-insert-state-exit ()
  "Run after evil-insert-state-exit."
  (chezmoi-template-buffer-display nil)
  (chezmoi-template-buffer-display t)
  (add-hook 'after-change-functions #'chezmoi-template--after-change nil 1))

(defun chezmoi-evil ()
  (if chezmoi-mode
      (progn
        (add-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter nil 1)
        (add-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit nil 1))
    (progn
      (remove-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter 1)
      (remove-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit 1))))
(add-hook 'chezmoi-mode-hook #'chezmoi-evil)
#+end_src
